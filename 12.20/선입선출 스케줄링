처리해야 할 동일한 작업이 n 개가 있고, 이를 처리하기 위한 CPU가 있습니다.

이 CPU는 다음과 같은 특징이 있습니다.

CPU에는 여러 개의 코어가 있고, 코어별로 한 작업을 처리하는 시간이 다릅니다.
한 코어에서 작업이 끝나면 작업이 없는 코어가 바로 다음 작업을 수행합니다.
2개 이상의 코어가 남을 경우 앞의 코어부터 작업을 처리 합니다.
처리해야 될 작업의 개수 n과, 각 코어의 처리시간이 담긴 배열 cores 가 매개변수로 주어질 때, 마지막 작업을 처리하는 코어의 번호를 return 하는 solution 함수를 완성해주세요.

제한 사항
코어의 수는 10,000 이하 2이상 입니다.
코어당 작업을 처리하는 시간은 10,000이하 입니다.
처리해야 하는 일의 개수는 50,000개를 넘기지 않습니다.

import java.util.*;
class Solution {
    public int solution(int n, int[] cores) {
        int answer = 0;
        //1. 코어의 개수
        int len = cores.length;
        //2. n이 코어의 개수보다 작거나 같은 경우, n번째 코어의 번호 return
        if(n <= len) return n;
        //3. 이분탐색 변수 설정
        //4. 최소시간
        int low = 1;
        //5. 최대시간
        int high = 10000*n;
        //6. 현재시간
        int time = 0;
        //7. 남은 작업량
        int work = 0;
        //8. 이분탐색으로 최적의 시간을 찾기
        while(low <= high){
            //9. 중간시간
            int mid = (low+high)/2;
            //10. 중간시간동안 처리할 수 있는 작업량 cal함수 호출로 계산하기
            int count = cal(mid, cores);
            //11. 중간시간동안 처리할 수 있는 작업량이 n이상인 경우
            if(count >= n){
                //12. 시간을 줄이기
                high = mid-1;
                time = mid;
                work = count;
            //13. 중간시간동안 처리할 수 있는 작업량이 n미만인 경우
            }else{
                //14. 시간 늘이기
                low = mid+1;
            }
            //15. 남은 작업량을 계산하고, 뒤에서부터 코어를 검사하기
            work -= n;
            for(int i = cores.length-1 ; i >= 0 ; i--){
                //16. 해장 코어가 작업을 완료한 경우
                if(time%cores[i] == 0){
                    //17. 남은 작업이 없는 경우
                    if(work == 0){
                        //18. 해당 코어 번호 return
                        answer = i+1;
                        break;
                    }
                    //19. 남은 작업량 감수
                    work--;
                }
            }
        }
        return answer;
    }
    //중간시간동안 처리할 수 있는 작업량을 계산하는 함수
    int cal(int mid, int[] cores){
        //20. 초기 작업량은 코어의 개수
        int count = cores.length;
        for(int i = 0 ; i < cores.length ; i++){
            //21. 각 코어가 처리할 수 있는 추가 작업량 더하기
            count += mid/cores[i];
        }
        return count;
    }
}
