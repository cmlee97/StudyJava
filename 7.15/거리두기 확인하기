개발자를 희망하는 죠르디가 카카오에 면접을 보러 왔습니다.

코로나 바이러스 감염 예방을 위해 응시자들은 거리를 둬서 대기를 해야하는데 개발 직군 면접인 만큼
아래와 같은 규칙으로 대기실에 거리를 두고 앉도록 안내하고 있습니다.

대기실은 5개이며, 각 대기실은 5x5 크기입니다.
거리두기를 위하여 응시자들 끼리는 맨해튼 거리1가 2 이하로 앉지 말아 주세요.
단 응시자가 앉아있는 자리 사이가 파티션으로 막혀 있을 경우에는 허용합니다.

5개의 대기실을 본 죠르디는 각 대기실에서 응시자들이 거리두기를 잘 기키고 있는지 알고 싶어졌습니다. 자리에 앉아있는 응시자들의 정보와 대기실 구조를 대기실별로 담은 2차원 문자열 배열 places가 매개변수로 주어집니다.
각 대기실별로 거리두기를 지키고 있으면 1을, 한 명이라도 지키지 않고 있으면 0을 배열에 담아 return 하도록 solution 함수를 완성해 주세요.

제한사항
places의 행 길이(대기실 개수) = 5
places의 각 행은 하나의 대기실 구조를 나타냅니다.
places의 열 길이(대기실 세로 길이) = 5
places의 원소는 P,O,X로 이루어진 문자열입니다.
places 원소의 길이(대기실 가로 길이) = 5
P는 응시자가 앉아있는 자리를 의미합니다.
O는 빈 테이블을 의미합니다.
X는 파티션을 의미합니다.
입력으로 주어지는 5개 대기실의 크기는 모두 5x5 입니다.
return 값 형식
1차원 정수 배열에 5개의 원소를 담아서 return 합니다.
places에 담겨 있는 5개 대기실의 순서대로, 거리두기 준수 여부를 차례대로 배열에 담습니다.
각 대기실 별로 모든 응시자가 거리두기를 지키고 있으면 1을, 한 명이라도 지키지 않고 있으면 0을 담습니다.

//bfs이용하여 탐색
//모든 P에 대해서 거리두기를 만족하는지 확인
//바로옆에 P가 오지 않거나 O가 있고 O와 인접한 자리에 P가 없는 경우
import java.util.*;
class Solution {
    public int[] solution(String[][] places) {
        int[] answer = new int[places.length];
        //1. 주어진 장소의 크기만큼 반복문 실행
        for(int i = 0 ; i < places.length ; i++){
            String[] p = places[i];
            boolean isOk = true;
            for(int j = 0 ; j < 5 && isOk ; j++){
                for(int k = 0 ; k < 5 && isOk ; k++){
                    //2. 해당자리에 응시자가 있는 경우
                    if(p[j].charAt(k) == 'P'){
                        //3. 주변 탐색을 하는 함수 실행
                        if(!bfs(j, k, p)) isOk = false;
                    }
                }
            }
            answer[i] = isOk ? 1 : 0;
        }
        return answer;
    }
    //주변탐색 함수
    boolean bfs(int j, int k, String[] p){
        //4. 상하좌우 확인하는 배열
        int dr[] = {-1, 1, 0, 0};
        int dc[] = {0, 0, -1, 1};
        //5. queue에 현재 'O'의 위치를 할당
        Queue<int[]> queue = new LinkedList<int[]>();
        queue.offer(new int[] {j, k});
        while(!queue.isEmpty()){
            int[] position = queue.poll();
            for(int i = 0 ; i < 4 ; i++){
                int nr = position[0] + dr[i];
                int nc = position[1] + dc[i];
                //6. 원래출발점 P는 제외 (nr == j && nc == k)
                if(nr < 0 || nc < 0 || nr >= 5 || nc >= 5 || (nr == j && nc == k))
                    continue;
                //7. 맨해튼거리 계산
                int d = Math.abs(nr-j) + Math.abs(nc-k);
                //8. 거리두기를 지키려면 O,X만 가능
                if(p[nr].charAt(nc)== 'P' && d <= 2) return false;
                //9. 다음 탐색을 하면 맨해튼거리가 1증가 d<2만 탐색
                else if(p[nr].charAt(nc) == '0' && d < 2)
                    queue.offer(new int[] {nr, nc});
            }
        }
        return true;
    }
}
//https://jisunshine.tistory.com/148
BFS(너비우선탐색) : 트리나 그래프를 방문 또는 탐색하는 방법. 주로 자료구조 queue를 사용하는 경우가 일반적이며 배열을 사용하는 경우 방향데이터를 이용해 배열의 시작점에서 범위를 넓혀가면서 탐색함
                   EX) 최단경로 찾기, 네트워크 탐색, 그래프의 레벨 순회 등
방식
1. 루트에서 시작
2. 자식 노드들을 저장 (자식의 위치를 저장)
3. 저장된 노드들을 차례로 방문한 후 각각의 자식들을 다시 저장
4. 다시 저장된 노드들을 차례로 방문한 후 또 각각의 자식들을 저장
5. 위의 과정을 반복
6. 모든 노드를 방문하면 탐색 종료
DFS와의 차이 : DFS는 갈림길에서 하나의 길로 들어서서 막다른 길이 나올 때까지 깊게 탐색하는 방식이라면 BFS는 갈림길에 연결되어 있는 모든 길을 한번씩 탐색한 뒤 다시 연결되어 있는 모든 길을 넓게 탐색
              무한한 길이를 가지는 경로가 존재하고 탐색목표가 다른 경로에 존재하는 경우 BFS경우 모든 경로를 동시에 진행하기 때문에 탐색 가능
