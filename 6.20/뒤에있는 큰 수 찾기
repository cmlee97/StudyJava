정수로 이루어진 배열 numbers가 있습니다. 배열 의 각 원소들에 대해 자신보다 뒤에 있는 숫자 중에서 자신보다 크면서 가장 가까이 있는 수를 뒷 큰수라고 합니다.
정수 배열 numbers가 매개변수로 주어질 때, 모든 원소에 대한 뒷 큰수들을 차례로 담은 배열을 return 하도록 solution 함수를 완성해주세요. 단, 뒷 큰수가 존재하지 않는 원소는 -1을 담습니다.

제한사항
4 ≤ numbers의 길이 ≤ 1,000,000
1 ≤ numbers[i] ≤ 1,000,000


//시간초과 코드 : 이중 for문으로 인하여 시간의 소요가 크다
import java.util.*;
class Solution {
    public int[] solution(int[] numbers) {
        int[] answer = new int[numbers.length];
        //1. 선언한 answer배열을 -1로 채운다
        Arrays.fill(answer, -1);
        for(int i = 0 ; i < numbers.length ; i++){
            for(int j = i+1 ; j < numbers.length ; j++){
                //2. 현재 자신보다 뒤에 있는 숫자 중에서 자신보다 큰경우
                if(numbers[i] < numbers[j]){
                    //3. 가장 가까운 수만 저장하기에 담은 후 break
                    answer[i] = numbers[j];
                    break;
                }
            }
        }
        return answer;
    }
}
//https://velog.io/@hiyoojeong/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%92%A4%EC%97%90-%EC%9E%88%EB%8A%94-%ED%81%B0-%EC%88%98-%EC%B0%BE%EA%B8%B0-JAVA
import java.util.*;
class Solution {
    public int[] solution(int[] numbers) {
        int[] answer = new int[numbers.length];
        //1. 선언한 answer배열을 -1로 채운다
        Arrays.fill(answer, -1);
        //2. stack을 사용하여 index저장
        Stack<Integer> stack = new Stack<>();
        for(int i = 0 ; i < numbers.length ; i++){
            //3. stack이 비어있지 않고 현재 스택의 값보다 number의 값이 크면
            while(!stack.isEmpty() && numbers[i] > numbers[stack.peek()]){
                //4. 뒤에 있는 큰 수에 해당하는 값 pop
                answer[stack.pop()] = numbers[i];
            }
            //5. 현재 index push
            stack.push(i);
        }
        return answer;
    }
}
