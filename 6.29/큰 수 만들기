어떤 숫자에서 k개의 수를 제거했을 때 얻을 수 있는 가장 큰 숫자를 구하려 합니다.

예를 들어, 숫자 1924에서 수 두 개를 제거하면 [19, 12, 14, 92, 94, 24] 를 만들 수 있습니다. 이 중 가장 큰 숫자는 94 입니다.

문자열 형식으로 숫자 number와 제거할 수의 개수 k가 solution 함수의 매개변수로 주어집니다. number에서 k 개의 수를 제거했을 때 만들 수 있는 수 중 가장 큰 숫자를 문자열 형태로 return 하도록 solution 함수를 완성하세요.

제한 조건
number는 2자리 이상, 1,000,000자리 이하인 숫자입니다.
k는 1 이상 number의 자릿수 미만인 자연수입니다.

탐욕법 (Greddy Algorithm) : 최적의 값을 구해야 하는 상항에서 사용되는 근시안적인 방법론. '각 단계에서 최적이라고 생각되는 것을 선택'해 나가는 방식으로 진행하여 최종적인 해답에 도달하는 알고리즘
                           항상 최적의 값을 보장하는 것이 아니라 최적의 값의 '근사한 값'을 목표
1. 탐욕선택속성(Greedy Choice Property) : 각 단계에서 '최선의 선택'을 했을 때 전체 문제에 대한 최적해를 구할 수 있는 경우
2. 최적부분구조 (Optimal Substructure) : 전체 문제의 최적해가 '부분 문제의 최적해로 구성'될 수 있는 경우
EX) 거스름돈, 체육복

단계
1. 문제의 최적해 구조 결정
2. 문제의 구조에 맞게 선택절차(Selection Procedure) 정의 : '현재상태'에서 '최적의 선택'을 함
3. 선택절차에 따라 선택을 수행
4. 선택된 해가 문제의 조건을 만족하는지 검사 : 적절성 검사(Feasibility Check) : 선택한 항목이 '문제의 조건'을 만족시키는 확인
5. 조건을 만족하지 않으면 해당 해 제외
6. 모든 선택이 완료되면 해답을 검사(Solution Check) : '최종 선택'이 '문제의 조건을 만족' 시키는지 확인
7. 조건을 만족하지 않으면 해답으로 인정되지 않음

                    그리디 알고리즘                                                동적계획법
중복 부분 문제 해결X                                            중복 부분 문제 해결O
최적을 선택하여 최적의 경로 구하기                               모든 상황을 계산하여 최적의 경로 구하기
최적이 아닌 경우가 될 수 있거나 풀리지 않는 문제가 될 수 있음      모든 상황을 계산하기에 시간이 오래걸림  

import java.util.*;
class Solution {
    public String solution(String number, int k) {
        String answer = "";
        int index = 0;        
        StringBuilder sb = new StringBuilder();
        //1. 만들어야하는 문자의 길이만큼 반복
        for(int i = 0 ; i < number.length() - k ; i++){
            int max = 0;
            //2. 조건에서 K만큼 수를 제거한 경우가 가장 큰수 이기 때문에 -> index로 시작해서 이어야할 문자의 길이 -1
            for(int j = index ; j <= i+k ; j++){
                if(max < number.charAt(j)-'0'){
                    max = number.charAt(j)-'0';
                    //3. 가장 큰수 다음의 index넣어주기
                    index = j + 1;
                }
            }
            //4. 만들어진 가장 큰수를 append해준다
            sb.append(max);
        }
        return sb.toString();
    }
}
// https://jhhj424.tistory.com/32
