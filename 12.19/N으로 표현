아래와 같이 5와 사칙연산만으로 12를 표현할 수 있습니다.

12 = 5 + 5 + (5 / 5) + (5 / 5)
12 = 55 / 5 + 5 / 5
12 = (55 + 5) / 5

5를 사용한 횟수는 각각 6,5,4 입니다. 그리고 이중 가장 작은 경우는 4입니다.
이처럼 숫자 N과 number가 주어질 때, N과 사칙연산만 사용해서 표현 할 수 있는 방법 중 N 사용횟수의 최솟값을 return 하도록 solution 함수를 작성하세요.

제한사항
N은 1 이상 9 이하입니다.
number는 1 이상 32,000 이하입니다.
수식에는 괄호와 사칙연산만 가능하며 나누기 연산에서 나머지는 무시합니다.
최솟값이 8보다 크면 -1을 return 합니다.

//DP(Dynamic Programming)
import java.util.*;
class Solution {
    public int solution(int N, int number) {
        int answer = -1;
        //1. N이랑 number가 같은 경우 1번만 하면 됨
        if(N == number) return 1;
        
        List<Set<Integer>> dp = new ArrayList<>();
        //2. 가능한 숫자들을 담을 리스트 초기화
        for(int i = 0 ; i <= 8 ; i++){
            //3. 8번의 연산까지 고려하기 위해 9개의 HashSet설정
            dp.add(new HashSet<>());
        }
        //4. 1번 연산으로 만들 수 있는 숫자는 N 하나이므로 N으로 초기화
        dp.get(1).add(N);
        //5. 숫자를 더하거나 빼는 연산을 통해 가능한 숫자 만들기
        for(int i = 2 ; i <= 8 ; i++){
            //6. N을 i번 반복한 숫자를 만들어 추가
            StringBuilder sb = new StringBuilder().append(N);
            for(int j = 1 ; j < i ; j++){
                sb.append(N);
            }
            dp.get(i).add(Integer.parseInt(sb.toString()));
            //7. 이전 연산결과들을 이용해 새로운 숫자 생성
            for(int j = 1 ; j < i ; j++){
                //8. dp[j]와 dp[i-j]에 저장된 숫자들을 이용해 i에 해당하는 숫자생성
                int k = i-j;
                for(int x : dp.get(j)){
                    for(int y : dp.get(k)){
                        dp.get(i).add(x+y);
                        dp.get(i).add(x-y);
                        dp.get(i).add(x*y);
                        if(y != 0) dp.get(i).add(x/y);
                    }
                }
            }
            //9. i번연산으로 number를 만들수 있는 경우, i return
            if(dp.get(i).contains(number)) return i;
        }
        //10. 8번의 연산으로도 만들 수 없는 경우 -1 return
        return answer;
    }
}
