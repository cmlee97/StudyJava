고속도로를 이동하는 모든 차량이 고속도로를 이용하면서 단속용 카메라를 한 번은 만나도록 카메라를 설치하려고 합니다.

고속도로를 이동하는 차량의 경로 routes가 매개변수로 주어질 때, 모든 차량이 한 번은 단속용 카메라를 만나도록 하려면 최소 몇 대의 카메라를 설치해야 하는지를 return 하도록 solution 함수를 완성하세요.

제한사항

차량의 대수는 1대 이상 10,000대 이하입니다.
routes에는 차량의 이동 경로가 포함되어 있으며 routes[i][0]에는 i번째 차량이 고속도로에 진입한 지점, routes[i][1]에는 i번째 차량이 고속도로에서 나간 지점이 적혀 있습니다.
차량의 진입/진출 지점에 카메라가 설치되어 있어도 카메라를 만난것으로 간주합니다.
차량의 진입 지점, 진출 지점은 -30,000 이상 30,000 이하입니다.

import java.util.*;
class Solution {
    public int solution(int[][] routes) {
        int answer = 0;
        //1. 나간 지점을 기준으로 오름차순 정렬
        Arrays.sort(routes, (o1, o2) -> {
            return o1[1] - o2[1];
        });
        //2. 첫 카메라 설치
        int end = routes[0][1];
        answer++;
        for(int i = 1 ; i < routes.length ; i++){
            //3. 다음 자동차의 진입이 현재 카메라 위치 보다 큰 경우
            if(end < routes[i][0]){
                //4. 새로운 카메라 설치
                end = routes[i][1];
                answer++;
            }
        }
        return answer;
    }
}
//함수 오바라이드 이용
import java.util.*;
class Solution {
    public int solution(int[][] routes) {
        int answer = 0;
        //1. 도로구간을 끝 지점 기준으로 오름차순 정렬
        Arrays.sort(routes, new Comparator<int[]>(){
            //2. 비교하는 함수 오버라이드
            public int compare(int[] route1, int[] route2){
                return route1[1] = route2[1];
            }
        });
        //2. 현재 카메라 설치 위치
        //모든 도로구간의 시작지점보다 작게 만들기
        int camera = Integer.MIN_VALUE;
        for(int[] route : routes){
            //3. 현재 카메라의 위치가 route의 시작지점보다 작은경우
            if(cam < route[0]){
                //4. 새로운 카메라를 종료지점에 설치
                cam = route[1];
                answer++;
            }
        }
        return answer;
    }
}
