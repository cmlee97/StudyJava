길이가 같은 배열 A, B 두개가 있습니다. 각 배열은 자연수로 이루어져 있습니다.
배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다. 이러한 과정을 배열의 길이만큼 반복하며, 
두 수를 곱한 값을 누적하여 더합니다. 이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다. 
(단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)

예를 들어 A = [1, 4, 2] , B = [5, 4, 4] 라면

A에서 첫번째 숫자인 1, B에서 첫번째 숫자인 5를 뽑아 곱하여 더합니다. (누적된 값 : 0 + 5(1x5) = 5)
A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 5 + 16(4x4) = 21)
A에서 세번째 숫자인 2, B에서 두번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 21 + 8(2x4) = 29)
즉, 이 경우가 최소가 되므로 29를 return 합니다.

배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.

제한사항
배열 A, B의 크기 : 1,000 이하의 자연수
배열 A, B의 원소의 크기 : 1,000 이하의 자연수

//Arrays.sort와 reverseOrder() Integer만 가능
import java.util.*;
class Solution
{
    int []reverseB;
    public int solution(int []A, int []B)
    {
        int answer = 0;
        // 1. 먼저 A배열을 ASC로 정렬
        Arrays.sort(A);
        // 2. B배열은 DESC로 정렬(함수사용)
        reverseB = reversesort(B);
        // 5. 1과 2를 곱한값을 answer변수에 누적하여 더한다
        for(int i = 0 ; i < A.length; i++){
            answer += A[i]*reverseB[i];
        }
        return answer;
    }
    // 3. 배열DESC정렬 함수
    int[] reversesort(int []reverseB){
        //4. 배열 길이만큼 반복문 돌린 후 큰 순서를 앞으로 정렬
        for(int i = 0 ; i < reverseB.length; i++){
            for(int j = i+1 ; j < reverseB.length ; j++){
                if(reverseB[i]<reverseB[j]){
                    int min = reverseB[i];
                    reverseB[i] = reverseB[j];
                    reverseB[j] = min;
                }
            }
        }
        return reverseB;
    }
    
}

import java.util.*;
class Solution
{
    public int solution(int []A, int []B)
    {
        int answer = 0;
        //1. A배열을 ASC정렬
        Arrays.sort(A);
        //2. B배열을 ASC정렬
        Arrays.sort(B);
        //3. A의 크기만큼 A는 앞에서부터 B는 뒤에서부터 곱한다
        for(int i = 0 ; i < A.length; i++){
            //4. 곱한 값을 answer변수에 누적하여 더한다
            answer += A[i]*B[B.length-i-1];
        }
        return answer;
    }    
}
