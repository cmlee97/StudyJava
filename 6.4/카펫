Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.
Leo는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.
Leo가 본 카펫에서 갈색 격자의 수 brown, 노란색 격자의 수 yellow가 매개변수로 주어질 때
카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.
노란색 격자의 수 yellow는 1 이상 2,000,000 이하인 자연수입니다.
카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.

//완전탐색
import java.lang.Math;
class Solution {
    public int[] solution(int brown, int yellow) {

        int[] answer = new int[2];
        int[][] gcdY = new int[yellow][2];
        int brownNum = 0;
        int count = 0;

        for(int i = 1 ; i <= yellow ; i++){
            if(yellow%i==0){
                gcdY[count][0] = i;
                gcdY[count][1] = yellow/i;
                count++;
            }else if(yellow==1){
                gcdY[count][0] = i;
                gcdY[count][1] = i;
                
            }
        }
        for(int i = 0 ; i < gcdY.length ; i++){
            for(int j = 0 ; j <= brown/2 ; j+=2){
                brownNum += ((gcdY[i][0]+j+gcdY[i][1]+j)*2)+4;
                if(brownNum==brown){
                    answer[0] = (gcdY[i][0]+j+2);
                    answer[1] = (gcdY[i][1]+j+2);
                    break;
                }
            }
            brownNum = 0;
        }
        return answer;
    }
}

class Solution {
    public int[] solution(int brown, int yellow) {
        int[] answer = new int[2];
        //1. 노란색의 최소 세로수는 3
        for(int i = 3 ; i < brown+yellow ; i++){
            int width = (brown + yellow) / i;
            if(width >= i){
                //2. brown + yellow 의 약수 구하기
                if((i - 2) * (width - 2) == yellow){
                    answer[0] = width;
                    answer[1] = i;
                    break;
                }
            }
        }
        return answer;
    }
}
