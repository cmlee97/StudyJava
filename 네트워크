//깊이·너비 우선탐색(DFS·BFS)
//네트워크

//BFS 탐색

import java.util.*;

class Solution {
    
    public int solution(int n, int[][] computers) {
        int answer = 0;
        boolean[] visited = new boolean[n];
        
        
        for(int i = 0 ; i < n ; i++){
            if(!visited[i]){
                BFS(computers, visited, i);
                answer++;
            }
        }
        return answer;
    }
    
    void BFS(int[][] computers, boolean[] visited, int v){
        Queue<Integer> queue = new LinkedList<>();
        visited[v] = true;
        queue.add(v);
        while(!queue.isEmpty()){
            Integer w = queue.poll();
            for(int i = 0 ; i < computers.length ; i++){
                if(computers[w][i] == 1 && !visited[i]){
                    visited[i]=true;
                    queue.add(i);
                }
            }
        }
    }
}

//DFS 탐색

import java.util.*;

class Solution {
    
    public int solution(int n, int[][] computers) {
        int answer = 0;
        boolean[] check = new boolean[n];
        
        for(int i = 0 ; i < n ; i++){
            if(!check[i]){
                DFS(computers, i, check);
                answer++;
            }
        }
        return answer;
    }
    
    boolean[] DFS(int[][] computers, int i, boolean[] check){
        check[i] = true;
        for(int j = 0 ; j < computers.length ; j++){
            if(i != j && computers[i][j] == 1 && check[j] == false){
                check = DFS(computers, j , check);
            }
        }
        return check;
    }
  
}
