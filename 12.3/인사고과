완호네 회사는 연말마다 1년 간의 인사고과에 따라 인센티브를 지급합니다. 각 사원마다 근무 태도 점수와 동료 평가 점수가 기록되어 있는데 만약 어떤 사원이 다른 임의의 사원보다 두 점수가 모두 낮은 경우가 한 번이라도 있다면 그 사원은 인센티브를 받지 못합니다. 그렇지 않은 사원들에 대해서는 두 점수의 합이 높은 순으로 석차를 내어 석차에 따라 인센티브가 차등 지급됩니다. 이때, 두 점수의 합이 동일한 사원들은 동석차이며, 동석차의 수만큼 다음 석차는 건너 뜁니다. 예를 들어 점수의 합이 가장 큰 사원이 2명이라면 1등이 2명이고 2등 없이 다음 석차는 3등부터입니다.

각 사원의 근무 태도 점수와 동료 평가 점수 목록 scores이 주어졌을 때, 완호의 석차를 return 하도록 solution 함수를 완성해주세요.

제한 사항
1 ≤ scores의 길이 ≤ 100,000
scores의 각 행은 한 사원의 근무 태도 점수와 동료 평가 점수를 나타내며 [a, b] 형태입니다.
scores[0]은 완호의 점수입니다.
0 ≤ a, b ≤ 100,000
완호가 인센티브를 받지 못하는 경우 -1을 return 합니다.

import java.util.*;
class Solution {
    public int solution(int[][] scores) {
        //1. 등수는 최소 1위이기떄문에 초기값을 1로 설정
        int answer = 1;
        //2. 첫 번째 학생점수 저장
        int[] score = scores[0];
        //3. 최고점수 저장하는 변수 선언
        int maxScore = 0;
        //4. 첫 번째 학생의 총점 계산
        int total = score[0] + score[1];
        //5. 점수를 내림차순 정렬
        //6. 1차 시험점수가 같은 경우, 2차 시험점수 기준으로 내림차순 정렬
        Arrays.sort(scores, (a, b) -> a[0] == b[0] ? a[1]-b[1] : b[0]-a[0]);
        
        for(int[] i : scores){
            //7. 현재 학생의 2차 시험점수가 최고점수보다 크거나 같은 경우
            if(maxScore <= i[1]){
                //8. 최고점수 갱신
                maxScore = i[1];
                //9. 현재 학생의 총점이 첫번째 학생의 총점보다 크면 등수 증가
                if(i[0] + i[1] > total) answer++;
            //10. 현재 학생의 점수가 첫번째 학생의 점수와 같고, 최고점수보다 낮을 경우
            }else{
                //11. 첫번째 학생의 등수가 1등이 아니므로 return -1
                if(i.equals(score)) return -1;
            }
        }
        return answer;
    }
}
//Comparator인터페이스
import java.util.*;
class Solution {
    public int solution(int[][] scores) {
        //1. 등수는 최소 1위이기떄문에 초기값을 1로 설정
        int answer = 1;
        //2. 첫 번째 학생점수 저장
        int[] wanho = scores[0];
        //3. 점수를 내림차순 정렬
        //Comparator인터페이스를 구현하여 두 학생의 점수를 비교하는 compare메서드로 값 반환받기
        Arrays.sort(scores, new Comparator<int[]>(){
           @Override
            public int compare(int[] o1, int[] o2) {
                // o1이 o2보다 작으면 양수 반환 (o2가 더 크므로 o2를 앞으로)
                if(o1[0] < o2[0])
                    return 1;
                else if(o1[0] == o2[0]) {
                    // 1차 시험 점수가 같으면 2차 시험 점수를 비교
                    if(o1[1] > o2[1])
                        return 1;
                    // o1이 o2보다 작으면 음수 반환 (o1을 앞으로)
                    else
                        return -1;
                }
                // o1이 o2보다 크면 음수 반환 (o1을 앞으로)
                else return -1;
            }
        });
        //4. 첫 번째 학생의 총점 계산
        int myPoint = wanho[0] + wanho[1];
        //5. 다른 학생들의 최고 2차 시험 점수 저장
        int peerPoint = 0;
        for(int[] score : scores) {
            if(score[1] < peerPoint) {
                if(wanho[0] == score[0] && wanho[1] == score[1])
                    return -1;
            }
            else {
                peerPoint = Math.max(score[1], peerPoint);
                if(myPoint < score[0] + score[1])
                    answer++;
            }
        }
        return answer;
    }
}
//https://velog.io/@qodlstjd12/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%9D%B8%EC%82%AC%EA%B3%A0%EA%B3%BC-java
