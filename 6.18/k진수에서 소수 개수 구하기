양의 정수 n이 주어집니다. 이 숫자를 k진수로 바꿨을 때, 변환된 수 안에 아래 조건에 맞는 소수(Prime number)가 몇 개인지 알아보려 합니다.

0P0처럼 소수 양쪽에 0이 있는 경우
P0처럼 소수 오른쪽에만 0이 있고 왼쪽에는 아무것도 없는 경우
0P처럼 소수 왼쪽에만 0이 있고 오른쪽에는 아무것도 없는 경우
P처럼 소수 양쪽에 아무것도 없는 경우
단, P는 각 자릿수에 0을 포함하지 않는 소수입니다.
예를 들어, 101은 P가 될 수 없습니다.
예를 들어, 437674을 3진수로 바꾸면 211020101011입니다. 여기서 찾을 수 있는 조건에 맞는 소수는 왼쪽부터 순서대로 211, 2, 11이 있으며, 총 3개입니다.
(211, 2, 11을 k진법으로 보았을 때가 아닌, 10진법으로 보았을 때 소수여야 한다는 점에 주의합니다.) 211은 P0 형태에서 찾을 수 있으며, 2는 0P0에서, 11은 0P에서 찾을 수 있습니다.

정수 n과 k가 매개변수로 주어집니다. n을 k진수로 바꿨을 때, 변환된 수 안에서 찾을 수 있는 위 조건에 맞는 소수의 개수를 return 하도록 solution 함수를 완성해 주세요.

제한사항
1 ≤ n ≤ 1,000,000
3 ≤ k ≤ 10

import java.util.*;
class Solution {
    public int solution(int n, int k) {
        int answer = 0;
        boolean count = false;
        //1. 주어진 숫자 n을 k진법으로 바꾸기
        String changeNum = Integer.toString(n,k);
        //2. n이 0이면 0값으로 return 하면서 함수 종료
        if(n == 0) return 0;
        //3. 문자열을 0기준으로 분리한 배열을 순회
        for(String num : changeNum.split("0")){
            //4. 빈문자열일 경우 계속 진행
            if(num.equals("")) continue;
            //5. 문자열을 long타입으로 변환
            long data = Long.parseLong(num);
            //6. 변환된 숫자가 1일 경우 count=true
            if(data == 1){
                count = true;
            }
            //7. i를 2부터 변환된 숫자의 제곱근까지 반복하기
            for(int i = 2 ; i <= Math.sqrt(data) ; i++){
                //8. data%i가 0이면 소수가 아니기때문에 count = false
                if(data%i == 0) count = true;
            }
            //8. count = false이면 소수이므로 answer++
            if(!count) answer++;
            count = false;
        }
        
        return answer;
    }
}


#소수판별알고리즘
#에라토스테네스 체 : 고대 그리스 수학자 에라토스테네스가 만들어낸 소수를 찾는 방법
                   f(x) = x/1Ρ(x)의 수열을 표로 시각화 한것
                   특정범위 내의 소수를 판정하는 데만 효율적
                   현재 특별한 공식이 나오지 않았으므로 에라토스테네스의 체가 가장 빠른 방법
방법(임의의 자연수 n에 대해 그 이하의 소수를 모두 찾는 경우)
1. 1~n까지 숫자를 쓴다
2. 일단 소수, 합성수가 아닌 자연수 1을 제거
3. 2를 제외한 2의 배수를 제거
4. 3을 제외한 3의 배수를 제거
5. 5를 제외한 5의 배수를 제거
6. 7을 제외한 7의 배수를 제거
7. 11을 제외한 11의 배수를 제거
8. n을 제곱근한 수까지의 배수를 제거
n보다 작은 합성수 m은 √n보다 작은 수의 배수만 체크해도 전부 지워진다는 의미이므로, √n이하의 수의 배수만 지우면 됨

예시
class Solution {
    public int solution(int n) {
        boolean check;
        int answer = 0;
        //1. 에라토스테네스의 법칙 이용 : n의 제곱근이하만큼 2부터 반복해서 나누어 떨어지지않으면 소수
        for(int i=2;i<=n;i++){ 
            check = true;
            for(int j=2;j<=Math.sqrt(i);j++){
                //2. 소수가 아니므로 check = false 후 반복문 탈출
                if(i%j==0){
                    check =f alse;
                    break;
                }
            }
            //3. check = true면 소수이므로 answer++
            if(check == true){
                answer++;
            }
        }
 
        return answer;
    }
}
