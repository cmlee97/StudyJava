문제 설명
n개의 음이 아닌 정수들이 있습니다. 이 정수들을 순서를 바꾸지 않고 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다.
예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.

제한사항
주어지는 숫자의 개수는 2개 이상 20개 이하입니다.
각 숫자는 1 이상 50 이하인 자연수입니다.
타겟 넘버는 1 이상 1000 이하인 자연수입니다.

//BFS
import java.util.*;
class Solution {
    public int solution(int[] numbers, int target) {
        int answer = 0;
        //1. numbers의 더하거나 빼는 수의 경우를 담을 queue선언
        Queue<Integer> queue = new LinkedList<>();
        //2. 초기값으로 0을 queue에 넣어둔다.
        queue.add(0);
        //3. 주어지는 숫자 배열의 길이만큼 반복문
        for(int i = 0 ; i < numbers.length ; i++){
            int size = queue.size();
            //4. 현재 queue의 크기만큼 반복문 수행
            for(int j = 0 ; j < size ; j++){
                //5. 마지막으로 담긴 queue값 가져오기
                int sum = queue.poll();
                //6. 현재 numbers의 값을 가지고온 queue값에서 더하거나 뺀다
                queue.add(sum+numbers[i]);
                queue.add(sum-numbers[i]);
            }
        }
        //7. queue의 크기가 0이 될때까지
        while(!queue.isEmpty()){
            //8. target값과 같은 값이 나오는 경우의 수를 구한다
            if(queue.poll()==target){
                answer++;
            }
        }
        return answer;
    }
}
