두 수의 최소공배수(Least Common Multiple)란 입력된 두 수의 배수 중 공통이 되는 가장 작은 숫자를 의미합니다. 예를 들어 2와 7의 최소공배수는 14가 됩니다.
정의를 확장해서, n개의 수의 최소공배수는 n 개의 수들의 배수 중 공통이 되는 가장 작은 숫자가 됩니다. n개의 숫자를 담은 배열 arr이 입력되었을 때 이 수들의 최소공배수를 반환하는 함수, solution을 완성해 주세요.

제한 사항
arr은 길이 1이상, 15이하인 배열입니다.
arr의 원소는 100 이하인 자연수입니다.

//유클리드 호제법
class Solution {
    public int solution(int[] arr) {
        int answer = arr[0];
        //1. 배열전체를 앞에서부터 두개씩 꺼내와 최소공배수를 구하기
        for(int i = 1 ; i < arr.length ; i++){
            answer = lcm(answer, arr[i]);
        }
        
        return answer;
    }
    //최대공배수 함수
    int gcd(int a, int b){
        //2. 나머지가 0이 될때까지 구한다
        if(a%b == 0){
            return b;
        }
        return gcd(b, a%b);
    }
    //최소공배수 함수
    int lcm(int a , int b){
        //3. 최소공배수를 구하려면 최대공약수를 먼저 구해야 함
        return a*b/gcd(a,b);
    }
}

유클리드 호제법(Euclidean Algorithm) : 2개의 자연수 또는 정식의 최대공약수를 구하는 알고리즘
2개의 자연수(또는 정식) a, b에 대해서 a를 b로 나눈 나머지를 r이라 하면(단, a>b), a와 b의 최대공약수는 b와 r의 최대공약수와 같음
b를 r로 나눈 나머지 r'를 구하고, 다시 r을 r'로 나눈 나머지를 구하는 과정을 반복하여 나머지가 0이 되었을 때 나누는 수가 a와 b의 최대공약수
알고리즘
1. 입력으로 두수 m,n(m>n)
2. n이 0이라면, m을 출력하고 알고리즘 종료
3. m 이 n으로 나누어 떨어지면, n을 출력하고 알고리즘 종료
4. 그렇지 않을경우, m을 n으로 나눈 나머지를 새롭게 m에 대입하고, m과 n을 바꾸고 3번부터 반복
호제법 : 두 수가 서로 상대방 수를 나누어서 결국 원하는 수를 얻는 알고리즘

c언어
int gcd(int a, int b){
    return b ? gcd(b, a%b) : a;
}
int gcd(int a, int b){
    int c;
    while(b){
        c = a%b;
        a = b;
        b = c;
    }
    return a;
}

파이썬
def gcd(m,n):
	if m < n:
		m, n = n, m
	if n == 0:
		return m
    if m % n == 0:
		return n
	else:
		return gcd(n, m%n)

def gcd(m,n):
    while n != 0:
       t = m%n
       (m,n) = (n,t)
    return abs(m)
