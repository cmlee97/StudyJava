메리는 여름을 맞아 무인도로 여행을 가기 위해 지도를 보고 있습니다. 지도에는 바다와 무인도들에 대한 정보가 표시돼 있습니다.
지도는 1 x 1크기의 사각형들로 이루어진 직사각형 격자 형태이며, 격자의 각 칸에는 'X' 또는 1에서 9 사이의 자연수가 적혀있습니다.
지도의 'X'는 바다를 나타내며, 숫자는 무인도를 나타냅니다. 이때, 상, 하, 좌, 우로 연결되는 땅들은 하나의 무인도를 이룹니다.
지도의 각 칸에 적힌 숫자는 식량을 나타내는데, 상, 하, 좌, 우로 연결되는 칸에 적힌 숫자를 모두 합한 값은 해당 무인도에서 최대 며칠동안 머물 수 있는지를 나타냅니다.
어떤 섬으로 놀러 갈지 못 정한 메리는 우선 각 섬에서 최대 며칠씩 머물 수 있는지 알아본 후 놀러갈 섬을 결정하려 합니다.

지도를 나타내는 문자열 배열 maps가 매개변수로 주어질 때, 각 섬에서 최대 며칠씩 머무를 수 있는지 배열에 오름차순으로 담아 return 하는 solution 함수를 완성해주세요.
만약 지낼 수 있는 무인도가 없다면 -1을 배열에 담아 return 해주세요.

제한사항
3 ≤ maps의 길이 ≤ 100
3 ≤ maps[i]의 길이 ≤ 100
maps[i]는 'X' 또는 1 과 9 사이의 자연수로 이루어진 문자열입니다.
지도는 직사각형 형태입니다.

//DFS
import java.util.*;
class Solution {
    int x = 0;
    int y = 0;
    int day = 0;

    public int[] solution(String[] maps) {
        // 2차원 배열 map 생성
        x = maps.length;
        y = maps[0].length();
        
        List<Integer> days = new ArrayList<>();
        int[][] map = new int[x][y];
        // 문자열 배열을 2차원 정수 배열로 변환
        for(int i = 0 ; i < x ; i++){
            char[] chars = maps[i].toCharArray();
            for(int j = 0 ; j < chars.length ; j++){
                if(chars[j] == 'X'){
                    // 벽은 0으로 표시
                    map[i][j] = 0;
                }else{
                    // 숫자로 변환
                    map[i][j] = chars[j] - '0';
                }
            }
        }
        boolean[][] visited = new boolean[x][y];
        for(int i = 0 ; i < x ;i++){
            for(int j = 0 ; j < y ; j++){
                // 방문하지 않았고, 이동 가능한 칸인 경우
                if(!visited[i][j] && map[i][j] > 0){
                    // 깊이 우선 탐색 수행
                    dfs(map, visited, i, j);
                    // 탐색 완료 후 걸린 날짜를 리스트에 추가
                    days.add(day);
                    // 다음 탐색을 위해 날짜 초기화
                    day = 0;
                }
            }
        }
        // 이동 가능한 섬이 없는 경우, -1 return
        if(days.isEmpty()) return new int[]{-1};
        // 걸린 날짜를 오름차순 정렬
        Collections.sort(days);
        int[] answer = new int[days.size()];
        for(int i = 0 ; i < answer.length ; i++) {
            answer[i] = days.get(i);
        }
        return answer;
    }
    //DFS함수
    void dfs(int[][] map, boolean[][] visited, int X, int Y){
        // 현재 칸의 이동 비용(날짜) 추가
        day += map[X][Y];
        // 현재 위치 방문처리
        visited[X][Y] = true;
        // 상,하,좌,우 이동 방향
        int[] dx = {1, -1, 0, 0};
        int[] dy = {0, 0, 1, -1};
        // 상,하,좌,우 4개의 반복문 실행
        for(int i = 0 ; i < 4 ; i++){
            int nextX = X + dx[i];
            int nextY = Y + dy[i];
            // 맵 범위 벗어나는 경우
            if(nextX < 0 || nextY < 0 || nextX >= x || nextY >= y) continue;
            // 이동 가능한 경우, DFS함수 재귀 호출
            if(!visited[nextX][nextY] && map[nextX][nextY] > 0) dfs(map, visited, nextX, nextY);
        }
    }
}
//QUEUE 이용풀이
import java.util.*;
class Solution {
    public int[] solution(String[] maps) {
        int[] dx = {1,0,-1,0};
        int[] dy = {0,1,0,-1};
        boolean[][] visit = new boolean[maps.length][maps[0].length()];
        Queue<int[]> que = new LinkedList<>();
        List<Integer> list = new ArrayList();
        
        for(int i = 0; i<maps.length; i++){
            for(int j = 0; j<maps[i].length(); j++){
                if(visit[i][j] || maps[i].charAt(j) == 'X')    continue;
                
                visit[i][j] = true;
                que.add(new int[] {i, j});
                
                int sum = Integer.parseInt(maps[i].substring(j,j+1));
                
                while(!que.isEmpty()){
                    int len = que.size();
                    for(int q = 0; q<len; q++){
                        int[] temp = que.poll();
                        for(int k = 0; k<4; k++){
                            int x = temp[0] + dx[k];
                            int y = temp[1] + dy[k];
                            
                            // 좌표가 지도안에 존재하면서 방문하지 않은 무인도
                            if(x >= 0 && x < maps.length && y >= 0 && y < maps[0].length() 
                               && !visit[x][y] && maps[x].charAt(y) != 'X'){
                                visit[x][y] = true;
                                que.add(new int[] {x, y});
                                sum += Integer.parseInt(maps[x].substring(y,y+1));
                            }
                        }
                    }
                }
                
                list.add(sum);
            }
        }
        
        if(list.size() == 0){
            int[] result = {-1};
            return result;
        }
        
        int[] answer = new int[list.size()];
        for ( int i = 0; i<list.size(); i++ ) {
            answer[i] = list.get(i);
        }
        
        Arrays.sort(answer);
        
        return answer;
    }
}
