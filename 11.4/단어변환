두 개의 단어 begin, target과 단어의 집합 words가 있습니다. 아래와 같은 규칙을 이용하여 begin에서 target으로 변환하는 가장 짧은 변환 과정을 찾으려고 합니다.

1. 한 번에 한 개의 알파벳만 바꿀 수 있습니다.
2. words에 있는 단어로만 변환할 수 있습니다.
예를 들어 begin이 "hit", target가 "cog", words가 ["hot","dot","dog","lot","log","cog"]라면 "hit" -> "hot" -> "dot" -> "dog" -> "cog"와 같이 4단계를 거쳐 변환할 수 있습니다.

두 개의 단어 begin, target과 단어의 집합 words가 매개변수로 주어질 때, 최소 몇 단계의 과정을 거쳐 begin을 target으로 변환할 수 있는지 return 하도록 solution 함수를 작성해주세요.

제한사항
각 단어는 알파벳 소문자로만 이루어져 있습니다.
각 단어의 길이는 3 이상 10 이하이며 모든 단어의 길이는 같습니다.
words에는 3개 이상 50개 이하의 단어가 있으며 중복되는 단어는 없습니다.
begin과 target은 같지 않습니다.
변환할 수 없는 경우에는 0를 return 합니다.
//DFS이용한 풀이
class Solution {
    int answer = 0;
    //1. 이미 바꾼 단어로 또 바뀌는 경우를 방지
    boolean[] visited;
    
    public int solution(String begin, String target, String[] words) {
        
        visited = new boolean[words.length];
        //2. 깊이 우선 탐색 함수 호출
        dfs(begin, target, words, 0);
        return answer;
    }
    //깊이 우선 탐색 함수
    void dfs(String begin, String target, String[] words, int count){
        //3. begin과 target이 같을 경우 함수종료
        if(begin.equals(target)){
            answer = count;
            return;
        }
        //4. begin과 target이 다른 단어일 경우 words길이 만큼 반복문 실행
        for(int i = 0 ; i < words.length ; i++){
            //5. 찾은 단어일 경우 계속 진행
            if(visited[i]) continue;
            //6. 같은 문자가 몇개 인지 세는 변수 선언
            int k = 0;
            for(int j = 0 ; j < begin.length() ; j++){
                if(begin.charAt(j) == words[i].charAt(j)) k++;
            }
            //7. 한 글자 빼고 모두 같은 경우
            if(k == begin.length() - 1){
                //8. 찾은 단어를 visted = true
                visited[i] = true;
                //9. count++ 하면서 dfs함수 재귀 호출
                dfs(words[i], target, words, count+1);
                //10. 모든 경우의 수를 위해 visited = false;
                visited[i] = false;
            }
            
        }
    }
}
