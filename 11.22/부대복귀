강철부대의 각 부대원이 여러 지역에 뿔뿔이 흩어져 특수 임무를 수행 중입니다. 지도에서 강철부대가 위치한 지역을 포함한 각 지역은 유일한 번호로 구분되며, 두 지역 간의 길을 통과하는 데 걸리는 시간은 모두 1로 동일합니다.
임무를 수행한 각 부대원은 지도 정보를 이용하여 최단시간에 부대로 복귀하고자 합니다. 다만 적군의 방해로 인해, 임무의 시작 때와 다르게 되돌아오는 경로가 없어져 복귀가 불가능한 부대원도 있을 수 있습니다.

강철부대가 위치한 지역을 포함한 총지역의 수 n, 두 지역을 왕복할 수 있는 길 정보를 담은 2차원 정수 배열 roads, 각 부대원이 위치한 서로 다른 지역들을 나타내는 정수 배열 sources, 강철부대의 지역 destination이 주어졌을 때,
주어진 sources의 원소 순서대로 강철부대로 복귀할 수 있는 최단시간을 담은 배열을 return하는 solution 함수를 완성해주세요. 복귀가 불가능한 경우 해당 부대원의 최단시간은 -1입니다.

제한사항
3 ≤ n ≤ 100,000
각 지역은 정수 1부터 n까지의 번호로 구분됩니다.
2 ≤ roads의 길이 ≤ 500,000
roads의 원소의 길이 = 2
roads의 원소는 [a, b] 형태로 두 지역 a, b가 서로 왕복할 수 있음을 의미합니다.(1 ≤ a, b ≤ n, a ≠ b)
동일한 정보가 중복해서 주어지지 않습니다.
동일한 [a, b]가 중복해서 주어지지 않습니다.
[a, b]가 있다면 [b, a]는 주어지지 않습니다.
1 ≤ sources의 길이 ≤ 500
1 ≤ sources[i] ≤ n
1 ≤ destination ≤ n

import java.util.*;
class Solution {
    List<List<Integer>> graph;
    //1. 각 노드까지의 최단거리
    int[] distance;
    //2. 최대거리 값
    int MAX = 1_000_000_000;
    public int[] solution(int n, int[][] roads, int[] sources, int destination) {
        int[] answer = {};
        graph = new ArrayList<>();
        //3. 그래프 초기화
        for(int i = 0 ; i < n + 1 ; i++) graph.add(new ArrayList<>());
        //4. 간선정보를 그래프에 넣기
        for(int[] road : roads){
            int start = road[0];
            int end = road[1];
            
            graph.get(start).add(end);
            graph.get(end).add(start);
            //5. 각 출발점에서 다익스트라 알고리즘 실행
            distance = new int[n+1];
            //6. 모든 거리를 최대값으로 초기화
            Arrays.fill(distance, MAX);
            //7. 목적지에서 출발하는 다익스트라 함수 실행
            dijkstra(destination);
            //8. 각 출발점까지의 최단 거리를 계산하여 결과배열에 저장
            int[] ans = new int[sources.length];
            for(int i = 0 ; i < sources.length ; i++) ans[i] = (distance[sources[i]] < MAX ? distance[sources[i]] : -1);
            answer = ans;
        }
        return answer;
    }
    //다익스트라 알고리즘 함수
    void dijkstra(int destination){
        Queue<Integer> queue = new LinkedList<>();
        queue.add(destination);
        //9. 목적지까지의 거리는 0으로 초기화
        distance[destination] = 0;
        
        while(!queue.isEmpty()){
            //10. 현재 위치
            int current = queue.poll();

            for(int i = 0 ; i < graph.get(current).size() ; i++){
                //11. 다음 위치
                int next = graph.get(current).get(i);
                //12. 더 짧은 경로를 발견할 경우
                if(distance[next] > distance[current]+1){
                    //13. 거리값 갱신
                    distance[next] = distance[current]+1;
                    //14. 다음 위치 큐에 add
                    queue.add(next);
                }
            }
        }
    }
}
//https://ksb-dev.tistory.com/192
