n명의 사람이 일렬로 줄을 서고 있습니다. n명의 사람들에게는 각각 1번부터 n번까지 번호가 매겨져 있습니다. n명이 사람을 줄을 서는 방법은 여러가지 방법이 있습니다. 예를 들어서 3명의 사람이 있다면 다음과 같이 6개의 방법이 있습니다.

[1, 2, 3]
[1, 3, 2]
[2, 1, 3]
[2, 3, 1]
[3, 1, 2]
[3, 2, 1]
사람의 수 n과, 자연수 k가 주어질 때, 사람을 나열 하는 방법을 사전 순으로 나열 했을 때, k번째 방법을 return하는 solution 함수를 완성해주세요.

제한사항
n은 20이하의 자연수 입니다.
k는 n! 이하의 자연수 입니다.

import java.util.*;
class Solution {
    public int[] solution(int n, long k) {
        int[] answer = new int[n];
        // 순열에 사용할 숫자들을 담은 리스트
        ArrayList<Integer> list = new ArrayList<>();
        // 팩토리얼 값을 저장할 변수
        long factorial = 1;
        // answer 배열의 인덱스
        int index = 0;
        // 1부터 n까지의 숫자를 리스트에 추가 -> 팩토리얼 값을 계산
        for(int i = 1 ; i <= n ; i++){
            factorial *= i;
            list.add(i);
        }
        // k는 0부터 시작하는 인덱스로 맞춰주기 위해 1 감소
        k--;
         // n개의 숫자를 모두 선택할 때까지 반복
        while(n > 0){
            // 현재 자릿수에 사용할 수 있는 숫자들의 갯수만큼 팩토리얼 값을 나누기
            factorial /= n;
            // k번째 순열에서 현재 자릿수에 와야 할 숫자의 인덱스 계산하기
            int seat = (int) (k / factorial);
            // 계산된 인덱스에 해당하는 숫자를 answer 배열에 저장
            answer[index] = list.get(seat);
            // 사용한 숫자를 리스트에서 제거
            list.remove(seat);
            // 다음 자릿수를 위한 k 값 갱신 (나머지 값으로 갱신)
            k %= factorial;
            // 다음 자릿수로 이동 -> index 증가
            index++;
            n--;
        }
        return answer;
    }
}
