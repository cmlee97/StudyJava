호텔을 운영 중인 코니는 최소한의 객실만을 사용하여 예약 손님들을 받으려고 합니다. 한 번 사용한 객실은 퇴실 시간을 기준으로 10분간 청소를 하고 다음 손님들이 사용할 수 있습니다.
예약 시각이 문자열 형태로 담긴 2차원 배열 book_time이 매개변수로 주어질 때, 코니에게 필요한 최소 객실의 수를 return 하는 solution 함수를 완성해주세요.

제한사항
1 ≤ book_time의 길이 ≤ 1,000
book_time[i]는 ["HH:MM", "HH:MM"]의 형태로 이루어진 배열입니다
[대실 시작 시각, 대실 종료 시각] 형태입니다.
시각은 HH:MM 형태로 24시간 표기법을 따르며, "00:00" 부터 "23:59" 까지로 주어집니다.
예약 시각이 자정을 넘어가는 경우는 없습니다.
시작 시각은 항상 종료 시각보다 빠릅니다.

//우선순위 큐 이용
import java.util.*;
class Solution {
    public int solution(String[][] book_time) {
        int answer = 0;
        // 예약 시간을 시작 시간 기준으로 오름차순 정렬
        Arrays.sort(book_time, (x, y) -> x[0].compareTo(y[0]));
        // 끝나는 시간 기준으로 우선순위 큐 생성
        PriorityQueue<int[]> pq = new PriorityQueue<>((x, y) -> x[1]-y[1]);
        for(String[] time : book_time){
            // 시작 시간과 끝나는 시간을 분 단위로 변환
            String[] startArr = time[0].split(":");
            String[] endArr = time[1].split(":");
            
            int start = Integer.parseInt(startArr[0])*60 + Integer.parseInt(startArr[1]);
            int end = Integer.parseInt(endArr[0])*60 + Integer.parseInt(endArr[1]);
            
            // 큐가 비어있는 경우
            if(pq.isEmpty()){
                answer++;
                // 새로운 예약 추가
                pq.offer(new int[]{start, end});
                continue;
            }
            // 이전 예약 정보 가져오기
            int[] previous = pq.poll();
            int startPrev = previous[0];
            int endPrev = previous[1];
            // 이전 예약이 끝난 후에 시작하는 경우
            if(start >= endPrev){
                // 새로운 예약 추가
                pq.offer(new int[]{start, end});
            // 이전 예약과 겹치는 경우
            }else{
                answer++;
                // 새로운 예약 추가
                pq.offer(new int[]{start, end});
                // 겹치는 이전 예약도 다시 큐에 추가
                pq.offer(previous);
            }
        }
        return answer;
    }
}

//
import java.util.*;
class Solution {    
    public int solution(String[][] book_time) {
        int answer = 0;
        int[] arr = new int[1440];
        for(String[] book : book_time){
            int start = changeMin(book[0]);
            int end = Math.min(1439, changeMin(book[1])+10);
            for(int j=start; j<end; j++){
                arr[j]++;
            }
        }
        for(int i=0; i<1440; i++){
            answer = Math.max(answer, arr[i]);
        }
        return answer;
    }
    public int changeMin(String time){
        int h = Integer.parseInt(time.split(":")[0]);
        int m = Integer.parseInt(time.split(":")[1]);
        int min = h * 60 + m;
        return min;
    }
}
