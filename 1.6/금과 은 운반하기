월간 코드 챌린지 시즌3
어느 왕국에 하나 이상의 도시들이 있습니다. 왕국의 왕은 새 도시를 짓기로 결정하였습니다. 해당 도시를 짓기 위해서는 도시를 짓는 장소에 금 a kg과 은 b kg이 전달되어야 합니다.

각 도시에는 번호가 매겨져 있는데, i번 도시에는 금 g[i] kg, 은 s[i] kg, 그리고 트럭 한 대가 있습니다.
i번 도시의 트럭은 오직 새 도시를 짓는 건설 장소와 i번 도시만을 왕복할 수 있으며, 편도로 이동하는 데 t[i] 시간이 걸리고, 최대 w[i] kg 광물을 운반할 수 있습니다.
(광물은 금과 은입니다. 즉, 금과 은을 동시에 운반할 수 있습니다.) 모든 트럭은 같은 도로를 여러 번 왕복할 수 있으며 연료는 무한대라고 가정합니다.

정수 a, b와 정수 배열 g, s, w, t가 매개변수로 주어집니다.
주어진 정보를 바탕으로 각 도시의 트럭을 최적으로 운행했을 때, 새로운 도시를 건설하기 위해 금 a kg과 은 b kg을 전달할 수 있는 가장 빠른 시간을 구해 return 하도록 solution 함수를 완성해주세요.

제한사항
0 ≤ a, b ≤ 109
1 ≤ g의 길이 = s의 길이 = w의 길이 = t의 길이 = 도시 개수 ≤ 105
0 ≤ g[i], s[i] ≤ 109
1 ≤ w[i] ≤ 102
1 ≤ t[i] ≤ 105
a ≤ g의 모든 수의 합
b ≤ s의 모든 수의 합

class Solution {
    public long solution(int a, int b, int[] g, int[] s, int[] w, int[] t) {
        long answer = -1;
        long left = 1;
        //1. 가능한 최대 시간 
        long right = (long)(10e9*2*10e5*2);

        while(left <= right){
            //2.  중간 시간 계산
            long mid = (left+right)/2;
            
            int gold = 0;
            int silver = 0;
            int sum = 0;
            for(int i = 0 ; i < s.length ; i++){
                //3. i번째 광산의 생산량
                int weight = w[i];
                //4. i번째 광산의 운송 시간
                int time = t[i];
                //5. 왕복 운송 횟수 계산
                long count = mid/(time*2);
                //6. 왕복 운송 횟수 조정 (시간 초과분 고려)
                if((mid%(time*2)) >= time) count++;
                //7. i번째 광산에서 채굴 가능한 금 최댓값
                gold += Math.min(g[i], weight*count);
                //8. i번째 광산에서 채굴 가능한 은 최댓값
                silver += Math.min(s[i], weight*count);
                //9. i번째 광산에서 채굴 가능한 금과 은의 합 최댓값
                sum += Math.min(g[i]+s[i], weight*count);
            }
            //10. 목표 금액 달성 가능한 경우
            if(gold >= a && silver >= b && sum >= a+b){
                answer = mid;
                right = mid-1;
            //11. 목표 금액 달성 실패한 경우
            }else{
                //12. 최저 시간을 갱신
                left = mid+1;
            }
        }
        return answer;
    }
}
