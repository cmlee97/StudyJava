//시간초과

class Solution {
    public int solution(int[][] maps) {
        int answer = 0;
        int width = maps[0].length;
        int height = maps.length;
        int x_Index = 0;
        int y_Index = 0;
        
        if(maps[width-1][height-2]==0 && maps[width-2][height-1]==0) return -1;
        
        while(x_Index != width-1 && y_Index!=height-1){
            if(maps[y_Index][x_Index++] == 1) answer++;
            else {
                x_Index--;
                if(maps[y_Index++][x_Index] == 1) answer++;
                else {
                    y_Index--;
                    if(maps[y_Index--][x_Index] == 1) answer++;
                        else y_Index++;

                }
            }
        }
        return answer-=1;
    }
}

//BFS를 사용한 queue
import java.util.*;
import java.io.*;
class Solution {
    int answer = -1;
    boolean[][] visited;
    
    int[] mrow = {-1, 1, 0, 0};
    int[] mcol = {0, 0, -1, 1};
    
    public int solution(int[][] maps) {
        visited = new boolean[maps.length][maps[0].length];
        
        bfs(0, 0, maps);
        return answer;
    }
    void bfs(int row, int col, int[][] maps){
        Queue<Node> queue = new LinkedList<>();
        queue.add(new Node(0, 0, 1));
        visited[0][0] = true;
        while(!queue.isEmpty()){
            Node now = queue.poll();
            if(now.row == maps.length-1 && now.col == maps[0].length-1){
                answer = now.count;
                return;
            }
            for(int i = 0 ; i < 4 ; i++){
                int nextRow = now.row + mrow[i];
                int nextCol = now.col + mcol[i];
                if(canMove(nextRow, nextCol, maps)){
                    visited[nextRow][nextCol] = true;
                    queue.add(new Node(nextRow, nextCol, now.count+1));
                }
            }
        }
    }
    class Node{
        int row;
        int col;
        int count;
        public Node(int row, int col, int count){
            this.row = row;
            this.col = col;
            this.count = count;
        }
    }
    boolean canMove(int row, int col, int[][] maps){
        return row >= 0 && row < visited.length && col>= 0 && col < visited[0].length && !visited[row][col] && maps[row][col] != 0;
    }
}
