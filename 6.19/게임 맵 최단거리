ROR 게임은 두 팀으로 나누어서 진행하며, 상대 팀 진영을 먼저 파괴하면 이기는 게임입니다. 따라서, 각 팀은 상대 팀 진영에 최대한 빨리 도착하는 것이 유리합니다.

지금부터 당신은 한 팀의 팀원이 되어 게임을 진행하려고 합니다. 다음은 5 x 5 크기의 맵에, 당신의 캐릭터가 (행: 1, 열: 1) 위치에 있고, 상대 팀 진영은 (행: 5, 열: 5) 위치에 있는 경우의 예시입니다.

위 그림에서 검은색 부분은 벽으로 막혀있어 갈 수 없는 길이며, 흰색 부분은 갈 수 있는 길입니다. 캐릭터가 움직일 때는 동, 서, 남, 북 방향으로 한 칸씩 이동하며, 게임 맵을 벗어난 길은 갈 수 없습니다.
아래 예시는 캐릭터가 상대 팀 진영으로 가는 두 가지 방법을 나타내고 있습니다.

첫 번째 방법은 11개의 칸을 지나서 상대 팀 진영에 도착했습니다.
두 번째 방법은 15개의 칸을 지나서 상대팀 진영에 도착했습니다.
위 예시에서는 첫 번째 방법보다 더 빠르게 상대팀 진영에 도착하는 방법은 없으므로, 이 방법이 상대 팀 진영으로 가는 가장 빠른 방법입니다.

만약, 상대 팀이 자신의 팀 진영 주위에 벽을 세워두었다면 상대 팀 진영에 도착하지 못할 수도 있습니다. 예를 들어, 다음과 같은 경우에 당신의 캐릭터는 상대 팀 진영에 도착할 수 없습니다.

게임 맵의 상태 maps가 매개변수로 주어질 때, 캐릭터가 상대 팀 진영에 도착하기 위해서 지나가야 하는 칸의 개수의 최솟값을 return 하도록 solution 함수를 완성해주세요. 단, 상대 팀 진영에 도착할 수 없을 때는 -1을 return 해주세요.

제한사항
maps는 n x m 크기의 게임 맵의 상태가 들어있는 2차원 배열로, n과 m은 각각 1 이상 100 이하의 자연수입니다.
n과 m은 서로 같을 수도, 다를 수도 있지만, n과 m이 모두 1인 경우는 입력으로 주어지지 않습니다.
maps는 0과 1로만 이루어져 있으며, 0은 벽이 있는 자리, 1은 벽이 없는 자리를 나타냅니다.
처음에 캐릭터는 게임 맵의 좌측 상단인 (1, 1) 위치에 있으며, 상대방 진영은 게임 맵의 우측 하단인 (n, m) 위치에 있습니다.

//시간초과

class Solution {
    public int solution(int[][] maps) {
        int answer = 0;
        int width = maps[0].length;
        int height = maps.length;
        int x_Index = 0;
        int y_Index = 0;
        //1. 맵의 크기가 0이면 -1출력
        if(maps[width-1][height-2]==0 && maps[width-2][height-1]==0) return -1;
        //2. x축과 y축의 크기가 해당 넓이와 높이보다 작을 때까지
        while(x_Index != width-1 && y_Index!=height-1){
            //3. 좌표값을 동 남 북 순서로 확인하며 해당 좌표값이 1 이면 answer 증가
            if(maps[y_Index][x_Index++] == 1) answer++;
            else {
                x_Index--;
                if(maps[y_Index++][x_Index] == 1) answer++;
                else {
                    y_Index--;
                    if(maps[y_Index--][x_Index] == 1) answer++;
                        else y_Index++;

                }
            }
        }
        return answer-=1;
    }
}

//BFS를 사용한 queue
import java.util.*;
import java.io.*;
class Solution {
    int answer = -1;
    //1. 방문한 경우 표시할 배열 선언
    boolean[][] visited;
    //2. row 방향과 col방향으로 움직일 배열 선언
    int[] mrow = {-1, 1, 0, 0};
    int[] mcol = {0, 0, -1, 1};
    
    public int solution(int[][] maps) {
        visited = new boolean[maps.length][maps[0].length];
        //3. bfs탐색 함수 호출
        bfs(0, 0, maps);
        return answer;
    }
    void bfs(int row, int col, int[][] maps){
        Queue<Node> queue = new LinkedList<>();
        //4. queue에 초기값 저장
        queue.add(new Node(0, 0, 1));
        //5. 출발 위치는 true 값으로 저장
        visited[0][0] = true;
        //6. queue가 다 찰 때까지
        while(!queue.isEmpty()){
            //7. 현재값 반환
            Node now = queue.poll();
            //8. 현재 위치가 도착지점일 경우 return
            if(now.row == maps.length-1 && now.col == maps[0].length-1){
                answer = now.count;
                return;
            }
            //9. 다음 좌표 값 구하기 동서남북으로 확인
            for(int i = 0 ; i < 4 ; i++){
                int nextRow = now.row + mrow[i];
                int nextCol = now.col + mcol[i];
                //10. 다음좌표로 이동할 수 있는 경우 
                if(canMove(nextRow, nextCol, maps)){
                    //11. 이동할 수 있는 좌표 ture값으로 변경
                    visited[nextRow][nextCol] = true;
                    //12. 해당 좌표 저장
                    queue.add(new Node(nextRow, nextCol, now.count+1));
                }
            }
        }
    }
    //좌표값 저장 함수
    class Node{
        int row;
        int col;
        int count;
        public Node(int row, int col, int count){
            this.row = row;
            this.col = col;
            this.count = count;
        }
    }
    //이동할 수 있는 좌표인지 확인하는 함수
    boolean canMove(int row, int col, int[][] maps){
        return row >= 0 && row < visited.length && col>= 0 && col < visited[0].length && !visited[row][col] && maps[row][col] != 0;
    }
}
