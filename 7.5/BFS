BFS(Breadth First Search)
- 너비우선탐색 : 트리나 그래프를 방문 또는 탐색하는 방법. 두 노드사이의 최단경로 혹은 임의의 경로를 찾는 경우 Queue를 사용하여 구현
- 여러 갈래 중 무한한 길이를 가지는 경로가 존재하고 탐색 목표가 다른 경로에 존재하는 경우 DFS는 영원히 종료하지 못하지만 BFS는 탐색이 가능하다.
- 갈림길에서 연결되는 모든 길을 한번씩 탐색하기 때문에 가중치가 없는 그래프에서는 시작점에서 끝점까지의 최단경로를 알아낼 수 있다
- 직관적이지 않으며 재귀적으로 동작하지 않는다
- 노드 방문여부를 반드시 검사해아함

ex) public static void main(String[] args){
	int[][] graph = {};
	boolean visit = new boolean[graph.length];
	bfs(1, graph, visit);
}
String bfs(int start, int[][] graph, boolean[] visit){
	StringBuilder sb = new StringBuilder();
	Queue<Integer> queue = new LinkedList<Integer>();
	queue.offer(start);
	visit[start] = true;
	
	while(!queue.isEmpty()){
		int node = queue.poll();
		sb.append(node + "->");
		for(int i = 0 ; i < graph[node].length ; i++){
			int temp = graph[node][i];
			if(!visit[temp]){
				visit[temp] = true;
				queue.offer(temp);
			}
		}
	}
	return sb.toString();
}
