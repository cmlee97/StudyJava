고고학자인 "튜브"는 고대 유적지에서 보물과 유적이 가득할 것으로 추정되는 비밀의 문을 발견하였습니다. 그런데 문을 열려고 살펴보니 특이한 형태의 자물쇠로 잠겨 있었고 문 앞에는 특이한 형태의 열쇠와 함께 자물쇠를 푸는 방법에 대해 다음과 같이 설명해 주는 종이가 발견되었습니다.

잠겨있는 자물쇠는 격자 한 칸의 크기가 1 x 1인 N x N 크기의 정사각 격자 형태이고 특이한 모양의 열쇠는 M x M 크기인 정사각 격자 형태로 되어 있습니다.

자물쇠에는 홈이 파여 있고 열쇠 또한 홈과 돌기 부분이 있습니다. 열쇠는 회전과 이동이 가능하며 열쇠의 돌기 부분을 자물쇠의 홈 부분에 딱 맞게 채우면 자물쇠가 열리게 되는 구조입니다.
자물쇠 영역을 벗어난 부분에 있는 열쇠의 홈과 돌기는 자물쇠를 여는 데 영향을 주지 않지만, 자물쇠 영역 내에서는 열쇠의 돌기 부분과 자물쇠의 홈 부분이 정확히 일치해야 하며 열쇠의 돌기와 자물쇠의 돌기가 만나서는 안됩니다.
또한 자물쇠의 모든 홈을 채워 비어있는 곳이 없어야 자물쇠를 열 수 있습니다.

열쇠를 나타내는 2차원 배열 key와 자물쇠를 나타내는 2차원 배열 lock이 매개변수로 주어질 때, 열쇠로 자물쇠를 열수 있으면 true를, 열 수 없으면 false를 return 하도록 solution 함수를 완성해주세요.

제한사항
key는 M x M(3 ≤ M ≤ 20, M은 자연수)크기 2차원 배열입니다.
lock은 N x N(3 ≤ N ≤ 20, N은 자연수)크기 2차원 배열입니다.
M은 항상 N 이하입니다.
key와 lock의 원소는 0 또는 1로 이루어져 있습니다.
0은 홈 부분, 1은 돌기 부분을 나타냅니다.

class Solution {
    public boolean solution(int[][] key, int[][] lock) {
        boolean answer = false;
        //1. key를 0도, 90도, 180도, 270도 총 4번을 회전하며 모든 경우의 수 확인
        for(int i = 0 ; i < 4 ; i++){
            //2. 키회전
            if(i > 0) key = rotation(key);
            //3. 자물쇠의 모든 위치에 key를 확인해보기
            for(int j = -(lock.length-1) ; j < (lock.length-1) ; j++){
                for(int k = -(lock.length-1) ; k < (lock.length-1) ; k++){
                    //4. key와 자물쇠가 맞으면 true
                    if(check(key, lock, j, k)) return true;
                }
            }
        }
        return answer;
    }
    //key를 90도씩 회전하는 함수
    int[][] rotation(int[][] key){
        int[][] check = new int[key.length][key.length];
        for(int i = 0 ; i < key.length ; i++){
            for(int j = 0 ; j < key.length ; j++){
                //5. key를 90도 회전시켜 배열에 저장
                check[i][j] = key[key.length-1-j][i];
            }
        }
        return check;
    }
    //key와 자물쇠가 맞는지 확인하는 함수
    boolean check(int[][] key, int[][] lock, int a, int b){
        //6. 자물쇠의 각 칸마다 검사
        for(int i = 0 ; i < lock.length ; i++){
            for(int j = 0 ; j < lock.length ; j++){
                //7. key의 범위를 벗어나는 경우
                if(i+a < 0 || i+a >= key.length || j+b < 0 || j+b >= key.length){
                    //8. 자물쇠의 해당 칸이 잠겨있는 경우, 실패이므로 false
                    if(lock[i][j] == 0) return false;
                }else{
                    //9. key와 자물쇠의 해당 칸이 같은 값인 경우, 실패이므로 false
                    if(lock[i][j] == key[i+a][j+b]) return false;
                }
            }
        }
        //10. 모든 칸이 다 맞는 경우, 성공이므로 true
        return true;
    }
}
