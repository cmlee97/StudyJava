스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다. 노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다.

속한 노래가 많이 재생된 장르를 먼저 수록합니다.
장르 내에서 많이 재생된 노래를 먼저 수록합니다.
장르 내에서 재생 횟수가 같은 노래 중에서는 고유 번호가 낮은 노래를 먼저 수록합니다.
노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays가 주어질 때, 베스트 앨범에 들어갈 노래의 고유 번호를 순서대로 return 하도록 solution 함수를 완성하세요.

제한사항
genres[i]는 고유번호가 i인 노래의 장르입니다.
plays[i]는 고유번호가 i인 노래가 재생된 횟수입니다.
genres와 plays의 길이는 같으며, 이는 1 이상 10,000 이하입니다.
장르 종류는 100개 미만입니다.
장르에 속한 곡이 하나라면, 하나의 곡만 선택합니다.
모든 장르는 재생된 횟수가 다릅니다.

import java.util.*;
class Solution {
    public int[] solution(String[] genres, int[] plays) {
        ArrayList<Integer> answer = new ArrayList<>();
        //1. 장르별 총 개수 <장르, 재생횟수>
        HashMap<String, Integer> num = new HashMap<>();
        //2. 장르에 속하는 노래 및 재생횟수 <고유번호, 재생횟수Map형태>
        HashMap<String, HashMap<Integer, Integer>> music = new HashMap<>();
        //3. 각 노래와 재생횟수를 반복문으로 처리
        for(int i = 0; i < plays.length; i++) {
            //4. 해당 장르가 장르별 총 재생횟수 Map에 없는 경우
            if(!num.containsKey(genres[i])) {
                HashMap<Integer, Integer> map = new HashMap<>();
                //5. 생성된 map에 재생횟수를 저장한 후 music에 저장하기
                map.put(i, plays[i]);
                music.put(genres[i], map);
                //6. 해당 장르의 총 재생횟수 초기값 설정
                num.put(genres[i], plays[i]);
            } else {
                //7. 장르가 이미 존재하는 경우에는 해당 장르의 노래정보 Update
                music.get(genres[i]).put(i, plays[i]);
                num.put(genres[i], num.get(genres[i]) + plays[i]);
            }
        }
        //8. 장르별 총 재생횟수 Map의 Key를 List형태로 가져온 후 내림차순 정렬
        List<String> keySet = new ArrayList(num.keySet());
        Collections.sort(keySet, (s1, s2) -> num.get(s2) - (num.get(s1)));
        
        for(String key : keySet) {
            //9. 현재 장르의 노래 정보와 노래 인덱스 목록정렬을 위해 List로 변환
            HashMap<Integer, Integer> map = music.get(key);
            List<Integer> genre_key = new ArrayList(map.keySet());
            //10. 노래 재생횟수를 기준으로 내림차순 정렬
            Collections.sort(genre_key, (s1, s2) -> map.get(s2) - (map.get(s1)));
            //11. 해당 장르에서 가장 많이 재생된 노래 인덱스를 가져오기
            answer.add(genre_key.get(0));
            //12. 해당 장르에 노래가 2개 이상 있으면 두번째로 많이 재생된 노래 인덱스 가져오기
            if(genre_key.size() > 1)
                answer.add(genre_key.get(1));
        }
        //13. ArrayList에 저장된 Integer값들을 int형 배열로 변환하여 반환
        return answer.stream().mapToInt(i -> i).toArray();
    }
}
