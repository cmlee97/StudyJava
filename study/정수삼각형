//프로그래머스 정수삼각형
위와 같은 삼각형의 꼭대기에서 바닥까지 이어지는 경로 중, 거쳐간 숫자의 합이 가장 큰 경우를 찾아보려고 합니다. 아래 칸으로 이동할 때는 대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동 가능합니다.
예를 들어 3에서는 그 아래칸의 8 또는 1로만 이동이 가능합니다.

삼각형의 정보가 담긴 배열 triangle이 매개변수로 주어질 때, 거쳐간 숫자의 최댓값을 return 하도록 solution 함수를 완성하세요.

제한사항
삼각형의 높이는 1 이상 500 이하입니다.
삼각형을 이루고 있는 숫자는 0 이상 9,999 이하의 정수입니다.

import java.util.*;

class Solution {
    public int solution(int[][] triangle) {
        int answer = 0;
        int height = triangle.length;
        //1. 삼각형은 이중배열을 통해 구현가능
        int[][]dp = new int[height][height];
        
        //2. 가장 왼쪽은 미리 저장 가능
        dp[0][0] = triangle[0][0];
        //3. 점화식을 통해 dp배열에 값 저장
        for(int i = 1 ; i< height ; i++){
            dp[i][0] = dp[i-1][0] + triangle[i][0];
        }
        //4. 위에서 내려오면서 최대값을 구하기
        for(int i = 1 ; i < height ; i++){
            for(int j = 1 ; j < triangle[i].length ; j++){
                //5. 왼쪽 위에서 내려와 더했을 경우, 오른쪽위에서 내려와 더했을 경우 중 최대값을 저장하기
                dp[i][j] = Math.max(dp[i-1][j-1] + triangle[i][j], dp[i-1][j]+triangle[i][j]);
            }
        }
        //6. 삼각형의 바닥에서 가장 큰 값을 Math.max함수를 통해 구하기
        for(int i = 0 ; i < height; i++){
            answer = Math.max(dp[height-1][i], answer);
        }
        return answer;
    }
}

// Scanner방법 이용
import java.util.Scanner;
public class Main {
 
	static int[][] arr;
	static Integer[][] dp;
	static int N;
 
	public static void main(String[] args) {
 
		Scanner in = new Scanner(System.in);
		N = in.nextInt();
		arr = new int[N][N];
		dp = new Integer[N][N];
 
		//1. 배열 초기화
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < i + 1; j++) {
				arr[i][j] = in.nextInt();
			}
		}
		
		//2. 가장 마지막 행의 값들을 DP의 마지막 행에도 똑같이 복사
		for (int i = 0; i < N; i++) {
			dp[N - 1][i] = arr[N - 1][i];
		}
		System.out.println(find(0, 0));
	}

	int find(int depth, int idx) {
		//3. 마지막 행일 경우 현재 위치의 dp값 반환
		if(depth == N - 1) return dp[depth][idx];
 
		//4. 탐색하지 않았던 값일 경우 다음 행의 양쪽 값 비교
		if (dp[depth][idx] == null) {
            //5. 바로 다음행의 index와 오른쪽 index 중 큰 값을 찾아 dp에 현재 index값과 더하여 저장
			dp[depth][idx] = Math.max(find(depth + 1, idx), find(depth + 1, idx + 1)) + arr[depth][idx];
		}
		return dp[depth][idx];
	}
}

//BufferedReader방법이용
import java.io.*;
import java.util.StringTokenizer;
 
public class Main {

	static int[][] arr;
	static Integer[][] dp;
	static int N;
 
	public static void main(String[] args) throws IOException { 

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 		N = Integer.parseInt(br.readLine());
		arr = new int[N][N];
		dp = new Integer[N][N];
        //1. 공백을 기준으로 문자열 분리
		StringTokenizer st;

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for (int j = 0; j < i + 1; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		for (int i = 0; i < N; i++) {
			dp[N - 1][i] = arr[N - 1][i];
		}
		System.out.println(find(0, 0));
 
	}
 
	int find(int depth, int idx) {
		if(depth == N - 1) return dp[depth][idx];
		if (dp[depth][idx] == null) {
			dp[depth][idx] = Math.max(find(depth + 1, idx), find(depth + 1, idx + 1)) + arr[depth][idx];
		}
		return dp[depth][idx];
 
	}
}

//동적계획법 DP(dynamic programming)
//단순 재귀코드
//Top-down(하향식)
//상위 문제를 해결하기 위해서 하위 문제를 재귀적으로 호출하여  하위 문제를 해결함으로써 상위 문제를 해결하는 방식이다. 
//이 때 해결해놓은 하위 문제를 저장해 놓기 위해 Memoization이 사용된다.
//피보나치 함수
//Bottom-up(상향식)
//하위에서부터 문제를 해결해나가면서 먼저 계산했던 문제들의 값을 활용해서 상위 문제를 해결해나가는 방식으로 DP의 전형적인 형태는 Bottom-up이다.
