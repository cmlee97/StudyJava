//프로그래머스 정수삼각형
import java.util.*;

class Solution {
    public int solution(int[][] triangle) {
        int answer = 0;
        int height = triangle.length;
        
        int[][]dp = new int[height][height];
        
        //가장 왼쪽
        dp[0][0] = triangle[0][0];
        for(int i = 1 ; i< height ; i++){
            dp[i][0] = dp[i-1][0] + triangle[i][0];
        }
        //위에서 내려오면서 최대값만 저장
        for(int i = 1 ; i < height ; i++){
            for(int j = 1 ; j < triangle[i].length ; j++){
                dp[i][j] = Math.max(dp[i-1][j-1] + triangle[i][j], dp[i-1][j]+triangle[i][j]);
            }
        }
        for(int i = 0 ; i < height; i++){
            answer = Math.max(dp[height-1][i], answer);
        }
        return answer;
    }
}

//동적계획법 DP(dynamic programming)
//단순 재귀코드
//Top-down(하향식)
//상위 문제를 해결하기 위해서 하위 문제를 재귀적으로 호출하여  하위 문제를 해결함으로써 상위 문제를 해결하는 방식이다. 
//이 때 해결해놓은 하위 문제를 저장해 놓기 위해 Memoization이 사용된다.
//피보나치 함수
//Bottom-up(상향식)
//하위에서부터 문제를 해결해나가면서 먼저 계산했던 문제들의 값을 활용해서 상위 문제를 해결해나가는 방식으로 DP의 전형적인 형태는 Bottom-up이다.
