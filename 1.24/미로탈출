1 x 1 크기의 칸들로 이루어진 직사각형 격자 형태의 미로에서 탈출하려고 합니다.
각 칸은 통로 또는 벽으로 구성되어 있으며, 벽으로 된 칸은 지나갈 수 없고 통로로 된 칸으로만 이동할 수 있습니다.
통로들 중 한 칸에는 미로를 빠져나가는 문이 있는데, 이 문은 레버를 당겨서만 열 수 있습니다. 레버 또한 통로들 중 한 칸에 있습니다.
따라서, 출발 지점에서 먼저 레버가 있는 칸으로 이동하여 레버를 당긴 후 미로를 빠져나가는 문이 있는 칸으로 이동하면 됩니다.
이때 아직 레버를 당기지 않았더라도 출구가 있는 칸을 지나갈 수 있습니다.
미로에서 한 칸을 이동하는데 1초가 걸린다고 할 때, 최대한 빠르게 미로를 빠져나가는데 걸리는 시간을 구하려 합니다.

미로를 나타낸 문자열 배열 maps가 매개변수로 주어질 때, 미로를 탈출하는데 필요한 최소 시간을 return 하는 solution 함수를 완성해주세요. 만약, 탈출할 수 없다면 -1을 return 해주세요.

제한사항
5 ≤ maps의 길이 ≤ 100
5 ≤ maps[i]의 길이 ≤ 100
maps[i]는 다음 5개의 문자들로만 이루어져 있습니다.
S : 시작 지점
E : 출구
L : 레버
O : 통로
X : 벽
시작 지점과 출구, 레버는 항상 다른 곳에 존재하며 한 개씩만 존재합니다.
출구는 레버가 당겨지지 않아도 지나갈 수 있으며, 모든 통로, 출구, 레버, 시작점은 여러 번 지나갈 수 있습니다.

//BFS 이용
import java.util.*;
class Solution {
    public int solution(String[] maps) {
        int answer = -1;
        // 지도의 세로 길이
        int x = maps.length;
        // 지도의 가로 길이
        int y = maps[0].length();
        // 시작점, 레버, 도착점 좌표 저장
        int[] start = new int[2];
        int[] lever = new int[2];
        int[] end = new int[2];
        // 지도를 탐색하여 시작점, 레버, 도착점 좌표 찾기
        for(int i = 0 ; i < x ; i++){
            for(int j = 0 ; j < y ; j++){
                char layout = maps[i].charAt(j);
                if(layout == 'S'){
                    start[0] = i;
                    start[1] = j;
                }else if(layout == 'L'){
                    lever[0] = i;
                    lever[1] = j;
                }else if(layout == 'E'){
                    end[0] = i;
                    end[1] = j;
                }
            }
        }
        // 시작점에서 레버까지의 거리 계산
        int StoL = bfs(maps, start, lever);
        // 레버에서 도착점까지의 거리 계산
        int LtoE = bfs(maps, lever, end);
        // 두 거리가 모두 유효한 경우에만 총 거리 계산
        if(StoL != -1 && LtoE != -1) answer = StoL + LtoE;
        return answer;
    }
    // BFS 함수 : 좌표에서 다른 좌표까지의 최단 거리를 계산
    int bfs(String[] maps, int[] start, int[] end){
        // 지도의 세로 길이
        int x = maps.length;
        int y = maps[0].length();
        // 이동 방향 (상, 하, 좌, 우)
        int[] dx = {-1, 1, 0, 0};
        // 지도의 가로 길이
        int[] dy = {0, 0, -1, 1};
        
        Queue<int[]> queue = new LinkedList<>();
        // 방문 여부를 기록하는 2차원 배열
        int[][] visited = new int[x][y];
        
        int X = start[0];
        int Y = start[1];
        queue.add(new int[]{X, Y});
        // queue가 빌 때 까지
        while(!queue.isEmpty()){
            int[] current = queue.poll();
            // 현재 위치의 x, y 좌표값
            X = current[0];
            Y = current[1];
            // 도착점에 도달한 경우, 거리 반환
            if(X == end[0] && Y == end[1]) return visited[X][Y];
            // 상,하,좌,우 4가지 경우의 반복문 실행
            for(int i = 0 ; i < 4 ; i++){
                // 다음 이동할 좌표의 값
                int nextX = X + dx[i];
                int nextY = Y + dy[i];
                 // 범위 벗어나거나 벽('X')이거나 이미 방문한 경우, 넘어감
                if(nextX < 0 || nextX >= x || nextY < 0 || nextY >= y || maps[nextX].charAt(nextY) == 'X' || visited[nextX][nextY] > 0) continue;
                // 다음 칸의 거리 업데이트
                visited[nextX][nextY] = visited[X][Y] + 1;
                queue.add(new int[]{nextX, nextY});
            }
        }
        // 경로가 없는 경우 -1 반환
        return -1;
    }
}
