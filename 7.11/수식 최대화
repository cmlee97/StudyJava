IT 벤처 회사를 운영하고 있는 라이언은 매년 사내 해커톤 대회를 개최하여 우승자에게 상금을 지급하고 있습니다.
이번 대회에서는 우승자에게 지급되는 상금을 이전 대회와는 다르게 다음과 같은 방식으로 결정하려고 합니다.
해커톤 대회에 참가하는 모든 참가자들에게는 숫자들과 3가지의 연산문자(+, -, *) 만으로 이루어진 연산 수식이 전달되며,
참가자의 미션은 전달받은 수식에 포함된 연산자의 우선순위를 자유롭게 재정의하여 만들 수 있는 가장 큰 숫자를 제출하는 것입니다.
단, 연산자의 우선순위를 새로 정의할 때, 같은 순위의 연산자는 없어야 합니다. 즉, + > - > * 또는 - > * > + 등과 같이 연산자 우선순위를 정의할 수 있으나 +,* > - 또는 * > +,-처럼
2개 이상의 연산자가 동일한 순위를 가지도록 연산자 우선순위를 정의할 수는 없습니다. 수식에 포함된 연산자가 2개라면 정의할 수 있는 연산자 우선순위 조합은 2! = 2가지이며, 연산자가 3개라면 3! = 6가지 조합이 가능합니다.
만약 계산된 결과가 음수라면 해당 숫자의 절댓값으로 변환하여 제출하며 제출한 숫자가 가장 큰 참가자를 우승자로 선정하며, 우승자가 제출한 숫자를 우승상금으로 지급하게 됩니다.

예를 들어, 참가자 중 네오가 아래와 같은 수식을 전달받았다고 가정합니다.

"100-200*300-500+20"

일반적으로 수학 및 전산학에서 약속된 연산자 우선순위에 따르면 더하기와 빼기는 서로 동등하며 곱하기는 더하기, 빼기에 비해 우선순위가 높아 * > +,- 로 우선순위가 정의되어 있습니다.
대회 규칙에 따라 + > - > * 또는 - > * > + 등과 같이 연산자 우선순위를 정의할 수 있으나 +,* > - 또는 * > +,- 처럼 2개 이상의 연산자가 동일한 순위를 가지도록 연산자 우선순위를 정의할 수는 없습니다.
수식에 연산자가 3개 주어졌으므로 가능한 연산자 우선순위 조합은 3! = 6가지이며, 그 중 + > - > * 로 연산자 우선순위를 정한다면 결괏값은 22,000원이 됩니다.
반면에 * > + > - 로 연산자 우선순위를 정한다면 수식의 결괏값은 -60,420 이지만, 규칙에 따라 우승 시 상금은 절댓값인 60,420원이 됩니다.

참가자에게 주어진 연산 수식이 담긴 문자열 expression이 매개변수로 주어질 때, 우승 시 받을 수 있는 가장 큰 상금 금액을 return 하도록 solution 함수를 완성해주세요.

[제한사항]
expression은 길이가 3 이상 100 이하인 문자열입니다.
expression은 공백문자, 괄호문자 없이 오로지 숫자와 3가지의 연산자(+, -, *) 만으로 이루어진 올바른 중위표기법(연산의 두 대상 사이에 연산기호를 사용하는 방식)으로 표현된 연산식입니다. 잘못된 연산식은 입력으로 주어지지 않습니다.
즉, "402+-561*"처럼 잘못된 수식은 올바른 중위표기법이 아니므로 주어지지 않습니다.
expression의 피연산자(operand)는 0 이상 999 이하의 숫자입니다.
즉, "100-2145*458+12"처럼 999를 초과하는 피연산자가 포함된 수식은 입력으로 주어지지 않습니다.
"-56+100"처럼 피연산자가 음수인 수식도 입력으로 주어지지 않습니다.
expression은 적어도 1개 이상의 연산자를 포함하고 있습니다.
연산자 우선순위를 어떻게 적용하더라도, expression의 중간 계산값과 최종 결괏값은 절댓값이 263 - 1 이하가 되도록 입력이 주어집니다.
같은 연산자끼리는 앞에 있는 것의 우선순위가 더 높습니다.

브루트 포스(brute force) : 완전탐색 알고리즘으로 가능한 모든 경우의 수를 모두 탐색하면서 요구조건에 충족되는 결과만을 가져옴
                          대부분 반복문과 조건문을 통하여 답을 도출
                          장점은 예외없이 100%의 정확성 보장 알고리즘을 설계하고 구현하기 쉬움
                          단점은 메모리 효율이 떨어지고 시간복잡도가 높음
                          EX) 너비우선탐색, 선형구조(순차탐색), 비선형구조(백트래킹, DFS, BFS)
조건
1. 문제에서 달성하고자 하는 솔루션이 정의되어 있어야 함
2. 문제를 해결할 수 있는 풀이의 수가 제한되어 있어야 함
문제해결 방법
1. 주어진 문제를 선형구조로 구조화하기
2. 구조화된 문제공간을 적절한 방법으로 해를 구성할 때 까지 탐색
3. 구성된 해를 정리

//dfs이용하여 순열 구하기 (브루트포스 알고리즘 이용)
//3가지 연산자에 대해서 가능한 우선순위는 3!=6가지이다. dfs를 통해 이에 대한 순열을 구하여 연산자 우선순위에 따라 계산 후 최댓값 비교

import java.util.*;
class Solution {
    long answer = 0;
    String op[] = {"+","-","*"};
    boolean[] visited = new boolean[3];
    ArrayList<Long> numList = new ArrayList<>();
    ArrayList<String> opList = new ArrayList<>();
    String[] perm = new String[3];
    
    public long solution(String expression) {
        String num = "";
        //1. 연산자와 숫자 구분
        for(int i = 0 ; i < expression.length() ; i++){
            char c = expression.charAt(i);
            //2. 현재 글자가 연산자 인경우 ArrayList opList에 추가 그전까지 해당되는 숫자 num을 numList에 추가
            if(c == '*' || c == '+' || c == '-'){
                opList.add(c+"");
                numList.add(Long.parseLong(num));
                num = "";
            //3. 아닌경우 num에 이어 붙이기
            }else{
                num += c;
            }
        }
        //4. 마지막 숫자
        numList.add(Long.parseLong(num));
        //5. 순열 만들기
        makePermutation(0);
        return answer;
    }
    void makePermutation(int depth){
        if(depth == op.length){
            //6. 연산함수 호출
            sol();
            return;
        }
        //7. op의 길이 만큼 반복문 실행
        for(int i = 0 ; i < op.length ; i++){
            if(visited[i]) continue;
            visited[i] = true;
            perm[depth] = op[i];
            //8. depth만큼 재귀함수 호출
            makePermutation(depth+1);
            visited[i] = false;
        }
    }
    //연산함수
    void sol(){
        //8. opList를 oper에 복사, numList를 num에 복사
        ArrayList<String> oper = new ArrayList<String>();
        oper.addAll(opList);
        ArrayList<Long> num = new ArrayList<Long>();
        num.addAll(numList);
        //9. 연산자 우선순위로 계산
        for(int i = 0 ; i < perm.length ;i++){
            String op = perm[i];
            for(int j = 0 ; j < oper.size() ; j++){
                //10. 현재 oper에서 가져온 연산자가 op와 같을 경우
                if(oper.get(j).equals(op)){
                    //11. 연산자 양옆으로 있는 숫자를 cal 함수로 연산하기
                    long n1 = num.get(j);
                    long n2 = num.get(j+1);
                    long result = cal(n1, n2, op);
                    //12. 연산된 숫자를 지우기
                    num.remove(j+1);
                    num.remove(j);
                    oper.remove(j);
                    //13. j index에 연산된 값을 add
                    num.add(j,result);
                    j--;
                }
            }
        }
        answer = Math.max(answer, Math.abs(num.get(0)));
    }
    //연산자와 연산할 숫자를 받아서 실제 계산하는 함수
    long cal(long n1, long n2, String op){
        long result = 0;
        //14. switch case문을 이용하여 현재 연산자와 일치하는 계산을 실행
        switch(op){
            case "*" :
                result = n1 * n2;
                break;
            case "+" :
                result = n1 + n2;
                break;
            case "-" :
                result = n1 - n2;
                break;
        }
        return result;
    }
}
//https://stritegdc.tistory.com/232
