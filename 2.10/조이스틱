조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA

조이스틱을 각 방향으로 움직이면 아래와 같습니다.

▲ - 다음 알파벳
▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)
◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)
▶ - 커서를 오른쪽으로 이동 (마지막 위치에서 오른쪽으로 이동하면 첫 번째 문자에 커서)
예를 들어 아래의 방법으로 "JAZ"를 만들 수 있습니다.

- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.
- 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.
- 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.
따라서 11번 이동시켜 "JAZ"를 만들 수 있고, 이때가 최소 이동입니다.
만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.

제한 사항
name은 알파벳 대문자로만 이루어져 있습니다.
name의 길이는 1 이상 20 이하입니다.
//Greedy(탐욕법)
class Solution {
    public int solution(String name) {
        int answer = 0;
        // 오른쪽으로만 이동하는 경우의 최소 이동 횟수 (초기값은 문자열 길이 - 1)
        int move = name.length() - 1;
        for(int i = 0 ; i < name.length() ; i++){
            // 각 문자를 'A'에서 해당 문자로 바꾸기 위한 알파벳 이동 횟수 계산
            // 'A'로부터의 거리와 'Z'로부터의 거리 중 더 가까운 값을 선택
            answer += Math.min(name.charAt(i) - 'A', 'Z' - name.charAt(i) + 1);
            // 현재 문자 다음부터 'A'가 아닌 문자가 나올 때까지의 인덱스
            int index = i + 1;
            while(index < name.length() && name.charAt(index) == 'A'){
                index++;
            }
            // 'A'가 아닌 문자를 찾아 이동하는 최적의 방법 계산
            // 오른쪽으로 i번 이동 후, 왼쪽으로 (name.length() - index)번 이동
            move = Math.min(move, i*2+name.length() - index);
            // 왼쪽으로 (name.length() - index)번 이동 후, 오른쪽으로 i번 이동
            move = Math.min(move, (name.length() - index)*2+i);
            // 두 가지 경우 중 더 적은 이동 횟수를 선택
        }
        // 알파벳 변경 횟수와 이동 횟수를 더하여 총 이동 횟수 계산
        answer = answer + move;
        return answer;
    }
}
