각 점에 가중치가 부여된 트리가 주어집니다. 당신은 다음 연산을 통하여, 이 트리의 모든 점들의 가중치를 0으로 만들고자 합니다.

임의의 연결된 두 점을 골라서 한쪽은 1 증가시키고, 다른 한쪽은 1 감소시킵니다.
하지만, 모든 트리가 위의 행동을 통하여 모든 점들의 가중치를 0으로 만들 수 있는 것은 아닙니다. 당신은 주어진 트리에 대해서 해당 사항이 가능한지 판별하고, 만약 가능하다면 최소한의 행동을 통하여 모든 점들의 가중치를 0으로 만들고자 합니다.

트리의 각 점의 가중치를 의미하는 1차원 정수 배열 a와 트리의 간선 정보를 의미하는 edges가 매개변수로 주어집니다.
주어진 행동을 통해 트리의 모든 점들의 가중치를 0으로 만드는 것이 불가능하다면 -1을, 가능하다면 최소 몇 번만에 가능한지를 찾아 return 하도록 solution 함수를 완성해주세요.
(만약 처음부터 트리의 모든 정점의 가중치가 0이라면, 0을 return 해야 합니다.)

제한사항
a의 길이는 2 이상 300,000 이하입니다.
a의 모든 수는 각각 -1,000,000 이상 1,000,000 이하입니다.
a[i]는 i번 정점의 가중치를 의미합니다.
edges의 행의 개수는 (a의 길이 - 1)입니다.
edges의 각 행은 [u, v] 2개의 정수로 이루어져 있으며, 이는 u번 정점과 v번 정점이 간선으로 연결되어 있음을 의미합니다.
edges가 나타내는 그래프는 항상 트리로 주어집니다.

//DFS 이용
import java.util.*;
class Solution {
    ArrayList<Integer> graph[];
    long answer = 0;
    boolean visited[];
    long temp[];
    public long solution(int[] a, int[][] edges) {
        //1. 초기화
        temp = new long[a.length];
        for(int i = 0 ; i < a.length ; i++)
        {
            temp[i] = a[i];
            //2. 모든 값의 합을 계산
            answer += temp[i];
        }
        //3. 모든 값의 합이 0이 아닌 경우에는 -1 return
        if(answer != 0) return -1;
        //4. 초기화
        graph = new ArrayList[a.length];
        visited = new boolean[a.length];
        
        for(int i = 0 ; i < a.length ; i++)
        {
            graph[i] = new ArrayList<>();
        }
        //5. 간선 정보를 그래프에 저장
        for(int[] edge : edges)
        {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }
        //6. 깊이우선탐색함수 (DFS함수) 호출
        dfs(0);
        
        return answer;
    }
    //DFS
    long dfs(int now)
    {
        visited[now] = true;
        //7. 자식 노드 탐색, graph[now].size() : 인접노드 개수
        for(int i = 0 ; i < graph[now].size() ; i++)
        {
            int next = graph[now].get(i);
            //8. 이미 방문한 노드인 경우 다음 노드로 넘어가기
            if(visited[next]) continue;
            //9. next노드를 시작점으로 dfs함수 재귀호출.
            //이때 반환값은 next노드를 루트로 하는 서버트리에서 모든 노드 값의 합
            temp[now] += dfs(next);
        }
        //10. 부모 노드로 전파되는 값 계산
        answer += Math.abs(temp[now]);
        return temp[now];
    }
}

//위상정렬 알고리즘 이용한 풀이 참고
import java.util.*;

class Solution {
    ArrayList<Integer> graph[];
    long answer = 0;
    boolean visited[];
    long atmp[];
    public long solution(int[] a, int[][] edges) {
        int len = a.length;
        //안되는 경우 : 가중치의 합이 0이 안되는 경우
        atmp = new long[len];
        for(int i=0;i<len;i++)
        {
            atmp[i] = a[i];
            answer+=atmp[i];
        }
        if(answer != 0) return -1;
        //되는 경우 : 횟수 체크
        graph = new ArrayList[len];
        visited = new boolean[len];
        //진입간선
        long indegree[] = new long[len];
        
        for(int i=0;i<len;i++)
        {
            graph[i] = new ArrayList<>();
        }
        
        for(int[] edge : edges)
        {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
            indegree[edge[0]]++;
            indegree[edge[1]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        //리프노드들을 큐에 저장
        for(int i=0;i<len;i++)
        {
            if(indegree[i]==1){
                q.offer(i);
                
            }
                
        }
        
        while(!q.isEmpty())
        {
            int now = q.poll();
            visited[now] = true;
            
            for(int next : graph[now])
            {
                if(visited[next]) continue;
                
                atmp[next] += atmp[now];
                answer+=Math.abs(atmp[now]);
                atmp[now] =0;
                indegree[next]--;
                if(indegree[next] == 1)
                    q.offer(next);
            }
        }
        return answer;
    }
    
    
}

//https://velog.io/@pkjeogus/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%AA%A8%EB%91%90-0%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0-java
