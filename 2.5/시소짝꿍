어느 공원 놀이터에는 시소가 하나 설치되어 있습니다. 이 시소는 중심으로부터 2(m), 3(m), 4(m) 거리의 지점에 좌석이 하나씩 있습니다.
이 시소를 두 명이 마주 보고 탄다고 할 때, 시소가 평형인 상태에서 각각에 의해 시소에 걸리는 토크의 크기가 서로 상쇄되어 완전한 균형을 이룰 수 있다면 그 두 사람을 시소 짝꿍이라고 합니다.
즉, 탑승한 사람의 무게와 시소 축과 좌석 간의 거리의 곱이 양쪽 다 같다면 시소 짝꿍이라고 할 수 있습니다.
사람들의 몸무게 목록 weights이 주어질 때, 시소 짝꿍이 몇 쌍 존재하는지 구하여 return 하도록 solution 함수를 완성해주세요.

제한 사항
2 ≤ weights의 길이 ≤ 100,000
100 ≤ weights[i] ≤ 1,000
몸무게 단위는 N(뉴턴)으로 주어집니다.
몸무게는 모두 정수입니다.

import java.util.*; 
class Solution {
    public long solution(int[] weights) {
        long answer = 0;
        // weights 배열 정렬
        Arrays.sort(weights);
        // 몸무게별 개수를 저장하는 Map
        Map<Double, Integer> map = new HashMap<>();
        // weights 배열 순회
        for(int weight : weights){
            // 현재 몸무게와 같은 몸무게를 가진 경우
            double same = weight;
            // 현재 몸무게의 2/3 배
            double twoThirds = (weight * 2) / 3;
            // 현재 몸무게의 1/2 배
            double half = weight / 2;
            // 현재 몸무게의 3/4 배
            double threeFourths = (weight * 3) / 4;
            // 현재 몸무게와 같은 몸무게를 가진 경우, 같은 몸무게를 가진 사람 수만큼 answer에 추가
            if(map.containsKey(same)) answer += map.get(same);
            // 현재 몸무게의 2/3 배에 해당하는 몸무게를 가진 경우, 2/3 배 몸무게를 가진 사람 수만큼 answer에 추가
            if(map.containsKey(twoThirds)) answer += map.get(twoThirds);
            // 현재 몸무게의 1/2 배에 해당하는 몸무게를 가진 경우, 1/2 배 몸무게를 가진 사람 수만큼 answer에 추가
            if(map.containsKey(half)) answer += map.get(half);
            // 현재 몸무게의 3/4 배에 해당하는 몸무게를 가진 경우, 3/4 배 몸무게를 가진 사람 수만큼 answer에 추가
            if(map.containsKey(threeFourths)) answer += map.get(threeFourths);
            // 현재 몸무게의 개수를 Map에 업데이트 (없으면 1, 있으면 +1)
            map.put((double)weight, map.getOrDefault(weight, 0) +1 );
        }
        return answer;
    }
}
