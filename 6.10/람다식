람다식 : 프로그래밍 언어에서 사용되는 개념으로 익명함수(Anonymous functions)를 지칭
         쉽게 말해 메서드를 하나의 식으로 표현한 것
         오직 람다식 자체만으로도 메서드이 역할을 대신할 수 있으며, 메서드의 매개변수로 전달되어지는 것도 가능하고, 메서드이 결과로 반환될 수 있음
         즉, 람다식으로 메서드를 변수처럼 사용 가능
         인터페이스에 두개 이상 추상 메서드가 들어있으면 이를 코드로 겹쳐 표현할 방법이 달리 없기 때문에, 추상 메소드 한개만 가진 인터페이스가 람다식의 타겟 타입(targe type)이 될 수 있음
익명함수 : 이름이 없는 함수로 일급객체(First class citizen)라는 특징을 가지고 있음
일급객체 : 일반적으로 다른 객체들에 적용가능한 연산을 모두 지원하는 객체로 함수를 값으로 사용할 수도 있으며 파라메터로 전달 및 변수에 대입하기 등 연산 가능

람다의 장점
1. 코드의 간결성 : 람다를 사용하면 불필요한 반복문의 삭제가 가능하며 복잡한 식을 단순하게 표현
2. 지연연산 수행 : 람다는 지연연상을 수행 함으로써 불필요한 연산을 최소화
3. 병렬처리 가능 : 멀티쓰레디를 활용하여 병렬처리를 사용
4. 필요한 정보만을 사용하는 방식을 통한 퍼포먼스 향상: 지연 연산을 지원하는 방식(스트리밍, 또는 언어에 따라서는 체인으로 부르기도 하는 방식)을 통하여 효율적인 퍼포먼스 기대, 메모리상의 효율성 및 불필요한 연산의 배제가 가능

람다의 단점
1. 호출이 어려움
2. 람다 stream 사용 시 단순 for문 혹은 while문 사용시 성능이 떨어짐
3. 불필요하게 사용되면 가독성이 떨어짐 -> 주석사용 권장
4. 모든 원소를 전부 순회하는 경우는 람다식이 조금 느림(어떤 방법으로 만들어도 최종 출력되는 바이트코드나 어셈블리 코드는 단순 반복문보다 몇 단계를 더 거치게 됨)
5. 익명 함수의 특성상 함수 외부의 캡처를 위해 캡처를 하는 시간 제약, 논리 제약적인 요소도 고려해야 하며, 디버깅 시 함수 콜스택 추적이 극도로 어려움

람다의 표현식
1. 람다는 매개변수 화살표(->) 함수몸체로 이용하여 사용
2. 함수몸체가 단일 실행문이면 괄호{}를 생략가능
3. 함수몸체가 return문으로만 구성되어 있는 경우 괄호{}를 생략불가능
변환타입 메서드이름(매개변수선언){}   ->     (매개변수선언)->{}

EX)
// 0부터 9까지의 숫자를 출력하는 코드
//JAVA
for (int i = 0; i < 10; i++) {
    System.out.println(i);
}
↓ 람다식으로 바꾸기
1. Java8지원 람다식 : IntStream.range(0, 10).forEach((int value) -> System.out.println(value));
2. 컴파일러의 추론을 통해 파라미터의 자료형을 생략한 코드 : IntStream.range(0, 10).forEach(value -> System.out.println(value));
3. 메서드 참조 : IntStream.range(0, 10).forEach(System.out::println);
//JavaScript
for (let i = 0; i < 10; i++) {
    console.log(i);
}
↓ 람다식으로 바꾸기
1. 람다식 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(i => console.log(i));
2. Array.from : Array.from({length: 10}, (_, i) => console.log(i));

interface IAdd {
    int add(int x, int y);
}

//https://inpa.tistory.com/entry/☕-Lambda-Expression
class Add implements IAdd {
    public int add(int x, int y) {
        return x + y;
    }
}
        
public class Main {
    public static void main(String[] args) {
        Add a = new Add();
        int result1 = a.add(1, 2);
        System.out.println(result1);
    }
}
↓ 람다식으로 바꾸기
interface IAdd {
    int add(int x, int y);
}

public class Main {
    public static void main(String[] args) {
        IAdd lambda = (x, y) -> { return x + y; };
        int result3 = lambda.add(1, 2);
        System.out.println(result3);
    }
}
