카카오에 신입 개발자로 입사한 "콘"은 선배 개발자로부터 개발역량 강화를 위해 다른 개발자가 작성한 소스 코드를 분석하여 문제점을 발견하고 수정하라는 업무 과제를 받았습니다.
소스를 컴파일하여 로그를 보니 대부분 소스 코드 내 작성된 괄호가 개수는 맞지만 짝이 맞지 않은 형태로 작성되어 오류가 나는 것을 알게 되었습니다.
수정해야 할 소스 파일이 너무 많아서 고민하던 "콘"은 소스 코드에 작성된 모든 괄호를 뽑아서 올바른 순서대로 배치된 괄호 문자열을 알려주는 프로그램을 다음과 같이 개발하려고 합니다.

용어의 정의
'(' 와 ')' 로만 이루어진 문자열이 있을 경우, '(' 의 개수와 ')' 의 개수가 같다면 이를 균형잡힌 괄호 문자열이라고 부릅니다.
그리고 여기에 '('와 ')'의 괄호의 짝도 모두 맞을 경우에는 이를 올바른 괄호 문자열이라고 부릅니다.
예를 들어, "(()))("와 같은 문자열은 "균형잡힌 괄호 문자열" 이지만 "올바른 괄호 문자열"은 아닙니다.
반면에 "(())()"와 같은 문자열은 "균형잡힌 괄호 문자열" 이면서 동시에 "올바른 괄호 문자열" 입니다.

'(' 와 ')' 로만 이루어진 문자열 w가 "균형잡힌 괄호 문자열" 이라면 다음과 같은 과정을 통해 "올바른 괄호 문자열"로 변환할 수 있습니다.

1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
  4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
  4-3. ')'를 다시 붙입니다. 
  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
  4-5. 생성된 문자열을 반환합니다.
"균형잡힌 괄호 문자열" p가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 "올바른 괄호 문자열"로 변환한 결과를 return 하도록 solution 함수를 완성해 주세요.

매개변수 설명
p는 '(' 와 ')' 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.
문자열 p를 이루는 '(' 와 ')' 의 개수는 항상 같습니다.
만약 p가 이미 "올바른 괄호 문자열"이라면 그대로 return 하면 됩니다.

import java.util.*;
class Solution {
    public String solution(String p) {
        String answer = "";
        //1. 올바른 괄호 문자열이면, 바로 문자열 return
        if(check(p)) return p;
        //2. 나머지 괄호 문자열 -> 올바른 괄호 문자열 변환 메소드 호출 및 answer에 저장
        answer = split(p);
        return answer;
    }
    //u를 변환하는 메소드
    String reverse(String p){
        //3. 변환한 문자열을 저장할 객체 선언
        StringBuilder sb = new StringBuilder();
        //4. 첫번째, 마지막 문자를 제외하고 반복문 실행
        for(int i = 1 ; i < p.length()-1 ; i++){
            //5. ( -> )
            if(p.charAt(i) == '(') sb.append(")");
            //6. ) -> (
            else sb.append("(");
        }
        //7. 새로운 문자열을 return
        return sb.toString();
    }
    //올바른 괄호 문자열인지의 여부
    boolean check(String p){
        //8. (의 개수를 세는 변수 선언
        int open = 0;
        //9. 첫문자가 )인 경우는 올바른 괄호 문자열이 아니기때문에 false return
        if(p.charAt(0)==')') return false;
        //10. 문자열길이 만큼 반복문 실행
        for(int i = 0 ; i < p.length() ; i++){
            //11. (의 개수 세기
            if(p.charAt(i) == '(') open++;
            else{
                //12. )를 만나면 open--
                open--;
                //13. 세면서 open이 음수가 되면 (의 개수보다 )의 개수가 많아지므로 올바른 괄호 문자열이 아니기 때문에 false return
                if(open < 0) return false;
            }
        }
        //14. 위 조건을 모두 통과하면 올바른 괄호 문자열이므로 true return
        return true;
    }
    //올바른 괄호 문자열 변환 메소드
    String split(String p){
        //15. 입력된 문자열 p를 u와 v로 나누어 저장하는 StringBuilder클래스 객체 선언
        StringBuilder u = new StringBuilder();
        StringBuilder v = new StringBuilder();
        //16. 빈 문자열인 경우, 빈 문자열 return
        if(p.length() == 0) return "";
        //17. (의 개수를 세는 변수 선언 
        int open = 0;
        for(int i = 0 ; i < p.length() ; i++){
            //18. 한 문자가 (인 경우 open++
            if(p.charAt(i)=='(') open++;
            //19. )인 경우 open--
            else open--;
            //20. open = 0인 경우 가장 작은 단위의 균형잡힌 괄호 문자열
            if(open == 0){
                //21. 해당 index를 기점으로 u와 v로 분리
                u.append(p.substring(0, i+1));
                v.append(p.substring(i+1, p.length()));
                //22. 만약 u가 올바른 괄호 문자열인 경우 , v에 대해 재귀호출 후 , u에 이어붙이기
                if(check(u.toString())){
                    u.append(split(v.toString()));
                //23. U가 올바른 괄호 문자열이 아닌 경우
                }else{
                    //24. 새로운 StringBuilder 객체 생성
                    StringBuilder str = new StringBuilder();
                    //25. (를 붙이기
                    str.append("(");
                    //26. v에 대해 재귀호출후 붙이기
                    str.append(split(v.toString()));
                    //27. )를 붙이기
                    str.append(")");
                    //28. u를 조작해 붙이기
                    str.append(reverse(u.toString()));
                    //29. 새로운 문자열 return
                    return str.toString();
                }
                break;
            }
        }
        //30. u가 올바른 문자인 경우에만 u를 return
        return u.toString();
    }
}
//https://fbtmdwhd33.tistory.com/250
