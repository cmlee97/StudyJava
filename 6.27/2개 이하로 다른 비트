양의 정수 x에 대한 함수 f(x)를 다음과 같이 정의합니다.

x보다 크고 x와 비트가 1~2개 다른 수들 중에서 제일 작은 수
예를 들어,

f(2) = 3 입니다. 다음 표와 같이 2보다 큰 수들 중에서 비트가 다른 지점이 2개 이하이면서 제일 작은 수가 3이기 때문입니다.
f(7) = 11 입니다. 다음 표와 같이 7보다 큰 수들 중에서 비트가 다른 지점이 2개 이하이면서 제일 작은 수가 11이기 때문입니다.

정수들이 담긴 배열 numbers가 매개변수로 주어집니다. numbers의 모든 수들에 대하여 각 수의 f 값을 배열에 차례대로 담아 return 하도록 solution 함수를 완성해주세요.

제한사항
1 ≤ numbers의 길이 ≤ 100,000
0 ≤ numbers의 모든 수 ≤ 1015

import java.util.*;
class Solution {
    public long[] solution(long[] numbers) {
        long[] answer = new long[numbers.length];
        //1. 주어진 배열만큼 반복문 실행
        for(int i = 0 ; i < numbers.length ; i++){
            long num = numbers[i];
            //2. 현재 해당하는 수를 비트 변환하기
            String target = Long.toBinaryString(numbers[i]);
            //3. 짝수일 경우 +1 한값이 제일 작은 값
            if(num % 2 == 0) answer[i] = num + 1;
            else{
                //4. 마지막 0인 index찾기
                int index = target.lastIndexOf("0");
                //5. -1인 경우
                if(index == -1){
                    String temp = "10" + target.substring(1, target.length());
                    answer[i] = Long.parseLong(temp, 2);
                }else{
                    String temp = target.substring(0, index) + "10" + target.substring(index + 2, target.length());
                    answer[i] = Long.parseLong(temp, 2);
                }
            }
        }
        return answer;
    }
}
//https://velog.io/@rlvy98/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-2%EA%B0%9C-%EC%9D%B4%ED%95%98%EB%A1%9C-%EB%8B%A4%EB%A5%B8-%EB%B9%84%ED%8A%B8Java-%EC%9E%90%EB%B0%94
