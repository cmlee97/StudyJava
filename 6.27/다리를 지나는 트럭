트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다.
다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다. 단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.

예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.

import java.util.*;따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.

solution 함수의 매개변수로 다리에 올라갈 수 있는 트럭 수 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭 별 무게 truck_weights가 주어집니다.
이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.

제한 조건
bridge_length는 1 이상 10,000 이하입니다.
weight는 1 이상 10,000 이하입니다.
truck_weights의 길이는 1 이상 10,000 이하입니다.
모든 트럭의 무게는 1 이상 weight 이하입니다.

class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 1;
        int now = 0;
        // 현재 다리에 있는 트럭의 무게의 합
        int weights = 0;
        Stack<Integer> stack = new Stack<>();
        Queue<Integer> queue = new LinkedList<>();
        //1. 다리 크기만큼 queue를 생성함과 동시에 0으로 초기화
        for(int i = 0 ; i < bridge_length ; i++){
            queue.add(0);
        }
        //2. 다리 길이가 1이거나 트럭의 개수가 1인 경우 -> 해당값 return
        if(bridge_length ==1) return truck_weights.length + 1;
        if(truck_weights.length == 1) return bridge_length + 1;
        //3. 트럭 개수 만큼 반복
        while(now < truck_weights.length){
            //4. 현재 다리에 이쓴 맨 앞 트럭의 무게 빼기
            weights -= queue.poll();
            //5. 새로운 트럭 넣기
            answer++;
            //6. 현재 다리에 있는 트럭 무게의 합과 들어올 트럭 무게 합과 무게 비교
            if(weights + truck_weights[now] <= weight){
                queue.offer(truck_weights[now]);
                weights += truck_weights[now++];
            //7. 견딜 수 있는 무게보다 커지면 0을 넣기
            }else queue.offer(0);
        }
        //8. 마지막 트럭까지 다리를 건너는 값을 구하기
        return answer + bridge_length - 1;
    }
}
//https://velog.io/@cyj2825/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%8B%A4%EB%A6%AC%EB%A5%BC-%EC%A7%80%EB%82%98%EB%8A%94-%ED%8A%B8%EB%9F%AD-Java%EC%9E%90%EB%B0%94
