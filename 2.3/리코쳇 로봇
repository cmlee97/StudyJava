리코쳇 로봇이라는 보드게임이 있습니다.
이 보드게임은 격자모양 게임판 위에서 말을 움직이는 게임으로, 시작 위치에서 출발한 뒤 목표 위치에 정확하게 멈추기 위해 최소 몇 번의 이동이 필요한지 말하는 게임입니다.
이 게임에서 말의 이동은 현재 위치에서 상, 하, 좌, 우 중 한 방향으로 게임판 위의 장애물이나 게임판 가장자리까지 부딪힐 때까지 미끄러져 움직이는 것을 한 번의 이동으로 정의합니다.
다음은 보드게임판을 나타낸 예시입니다. ("."은 빈 공간을, "R"은 로봇의 처음 위치를, "D"는 장애물의 위치를, "G"는 목표지점을 나타냅니다.)
...D..R
.D.G...
....D.D
D....D.
..D....
이때 최소 움직임은 7번이며 "R" 위치에서 아래, 왼쪽, 위, 왼쪽, 아래, 오른쪽, 위 순서로 움직이면 "G" 위치에 멈춰 설 수 있습니다.
게임판의 상태를 나타내는 문자열 배열 board가 주어졌을 때, 말이 목표위치에 도달하는데 최소 몇 번 이동해야 하는지 return 하는 solution함수를 완성해주세요.
만약 목표위치에 도달할 수 없다면 -1을 return 해주세요.

제한 사항
3 ≤ board의 길이 ≤ 100
3 ≤ board의 원소의 길이 ≤ 100
board의 원소의 길이는 모두 동일합니다.
문자열은 ".", "D", "R", "G"로만 구성되어 있으며 각각 빈 공간, 장애물, 로봇의 처음 위치, 목표 지점을 나타냅니다.
"R"과 "G"는 한 번씩 등장합니다.

//BFS
import java.util.*;
class Solution {
    // 게임판의 가로, 세로 크기
    int n;
    int m;
    // 상, 하, 좌, 우 방향을 나타내는 x, y좌표 변화량
    int[] dy = {-1, 1, 0, 0};
    int[] dx = {0, 0, 1, -1};
    // 방문 여부를 저장하는 2차원 배열, 방문한 칸의 최소 이동 횟수도 저장
    int[][] visited;
    // 게임판의 좌표를 나타내는 클래스
    class board{
        int x;
        int y;
        board(int y, int x){
            this.x = x;
            this.y = y;
        }
    }
    public int solution(String[] board) {
        int answer = 0;
        // 게임판의 세로 크기 초기화
        n = board.length;
        // 게임판의 가로 크기 초기화
        m = board[0].length();
        // 방문 배열 초기화
        visited = new int[n][m];
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                 // 시작점 'R'을 찾은 경우, BFS 시작
                if(board[i].charAt(j) == 'R') answer = bfs(board, i, j);
            }
        }
        return answer;
    }
    // BFS함수
    int bfs(String[] boards, int x, int y){
        // BFS를 위한 큐
        Queue<board> queue = new LinkedList<board>();
        // 시작점 큐에 삽입
        queue.offer(new board(x, y));
        // 시작점 방문 처리, 이동 횟수 1로 초기화
        visited[x][y] = 1;
        while(!queue.isEmpty()){
            // 큐에서 현재 위치 정보 추출
            board b = queue.poll();
            // 상, 하, 좌, 우 4방향 탐색
            for(int i = 0 ; i < 4 ; i++){
                // 이동거리
                int d = 0;
                while(true){
                    // 다음 이동할 y좌표
                    int nextY = b.y + (d+1)*dy[i];
                    // 현재 y좌표
                    int Y = b.y + d*dy[i];
                    // 다음 이동할 x좌표
                    int nextX = b.x + (d+1)*dx[i];
                    // 현재 x좌표
                    int X = b.x + d*dx[i];
                    // 게임판 경계를 벗어나거나, 장애물 'D'를 만난 경우, 멈추기
                    if(nextY < 0 || nextY >= n || nextX < 0 || nextX >= m || boards[nextY].charAt(nextX) == 'D'){
                        // 다음 이동할 칸이 방문하지 않은 칸인 경우, 방문 처리
                        if(visited[Y][X] == 0){
                            // 이동 횟수 갱신
                            visited[Y][X] = visited[b.y][b.x] +1;
                            // 큐에 다음 이동 위치 삽입
                            queue.add(new board(Y, X));
                        }
                        // 도착점 'G'에 도달한 경우, 이동 횟수 반환 (시작점 이동 횟수 1을 빼줌)
                        if(boards[Y].charAt(X) == 'G') return visited[Y][X] - 1;
                        // 더이상 이동 불가
                        break;
                    }
                    // 이동거리 증가
                    d++;
                }
            }
        }
        // 도착점에 도달하지 못한 경우 -1 반환
        return -1;
    }
}
