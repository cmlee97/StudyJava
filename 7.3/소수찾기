완전탐색 문제
한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.

각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.

제한사항
numbers는 길이 1 이상 7 이하인 문자열입니다.
numbers는 0~9까지 숫자만으로 이루어져 있습니다.
"013"은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.

에라토스테너스의 체 : 소수를 판별하는 알고리즘으로 소수들을 대량으로 빠르고 정확하게 구하는 방법
단일 숫자 소수 여부 확인 : 어떤 수의 소수의 여부를 확인 할 때는, 특정한 숫자의 제곱근 까지만 약수의 여부를 검증하면 O(N^1/2)의 시간복잡도로 빠르게 구할 수 있음.
                        수가 수(N이라고 가정)를 나누면 몫이 생기는데, 몫과 나누는 수 둘 중 하나는 N제곱근 이하
                        만약, 대량의 소수를 한꺼번에 판별해야할 경우는 '에라토스테네스의 체'를 이용
원리 : 가장 먼저 소수를 판별할 범위만큼 배열을 할당하여, 해당하는 값을 넣어주고, 이후에 하나씩 지워나가는 방법을 이용
1. 배열을 생성하여 초기화하기
2. 2부터 시작해서 특정 수의 배수에 해당하는 수를 모두 지우기(지울 때 자기자신은 지우지 않고, 이미 지워진 수는 건너뛰기)
3. 2부터 시작하여 남아있는 수를 모두 출력하기

import java.util.*;
class Solution {
    Set<Integer> set = new HashSet<>();
    boolean[] visited = new boolean[7];
    public int solution(String numbers) {
        int answer = 0;
        boolean prime = false;
        //1. 완전탐색 함수 호출
        dfs(numbers, "", 0);
        //9. 2의 배수인지 확인하는 반복문
        for(Integer num : set){
            //10. 2의 배수가 아닌 경우 answer에 누적하여 더하기
            if(prime(num)) answer++;
        }
        return answer;
    }
    void dfs(String numbers, String s, int depth){
        //2. numbers를 전체 다 탐색했을 경우 종료
        if(depth > numbers.length()){
            return;
        }
        for(int i = 0 ; i < numbers.length() ; i++){
            //3. 방문한지 않은 자리인경우
            if(!visited[i]){
                //4. 방문여부를 true로 입력
                visited[i] = true;
                //5. HashSet에 입력
                set.add(Integer.parseInt(s+numbers.charAt(i)));
                //6. 재귀함수를 이용하여 다음 깊이로 탐색 시작
                dfs(numbers, s+numbers.charAt(i), depth+1);
                //7. 현재 위치 방문여부를 false로 바꾸기
                visited[i] = false;
            }
        }
    }
    
    boolean prime(int n){
        if(n < 2){
            return false;
        }
        //8. 2의 배수 인지 확인
        for(int i = 2 ; i <= (int)Math.sqrt(n) ; i++){
            if(n%i == 0)return false;
        }
        return true;
    }
}
//https://hstory0208.tistory.com/entry/Java%EC%9E%90%EB%B0%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-Lv2-%EC%86%8C%EC%88%98-%EC%B0%BE%EA%B8%B0-%EC%99%84%EC%A0%84%ED%83%90%EC%83%89DFS
