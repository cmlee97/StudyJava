n명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.

처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다. 가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다. 하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.

모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.

입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.

제한사항
입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.
각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.
심사관은 1명 이상 100,000명 이하입니다.

//이분탐색
import java.util.*;
class Solution {
    public long solution(int n, int[] times) {
        long answer = 0;
        //1. 이분탐색의 왼쪽 경계
        long left = 0;
        //2. 이분탐색의 오른쪽 경계 (최대 작업 시간)
        long right = times[times.length-1]*(long)n;
        //3. 작업시간을 오름차순으로 정렬
        Arrays.sort(times);
        //4. 왼쪽 경계가 오른쪽 경계와 같거나 작을때까지
        while(left <= right){
            //5. 중간값 계산
            long mid = (left + right) / 2;
            //6. 완료된 작업 수
            long complete = 0;
            //7. 각 서버의 처리 가능한 작업 수를 더하여 총 완료 가능한 작업 수 계산
            for(int i = 0 ; i < times.length ; i++) complete += mid / times[i];
            //8. 완료된 작업 수가 필요한 작업 수보다 작을 경우, 왼쪽 경계를 중간값 + 1
            if(complete < n) left = mid + 1;
            //9. 완료된 작업 수가 필요한 작업 수보다 크거나 같은 경우
            else{
                //10. 오른쪽 경계를 중간값보다 작게 설정
                right = mid - 1;
                //11. 중간값을 최소 작업 시간으로 갱신
                answer = mid;
            }
        }
        return answer;
    }
}
