1와 0로 채워진 표(board)가 있습니다. 표 1칸은 1 x 1 의 정사각형으로 이루어져 있습니다. 표에서 1로 이루어진 가장 큰 정사각형을 찾아 넓이를 return 하는 solution 함수를 완성해 주세요. (단, 정사각형이란 축에 평행한 정사각형을 말합니다.)

예를 들어

1	2	3	4
0	1	1	1
1	1	1	1
1	1	1	1
0	0	1	0
가 있다면 가장 큰 정사각형은

1	2	3	4
0	1	1	1
1	1	1	1
1	1	1	1
0	0	1	0
가 되며 넓이는 9가 되므로 9를 반환해 주면 됩니다.

제한사항
표(board)는 2차원 배열로 주어집니다.
표(board)의 행(row)의 크기 : 1,000 이하의 자연수
표(board)의 열(column)의 크기 : 1,000 이하의 자연수
표(board)의 값은 1또는 0으로만 이루어져 있습니다.

class Solution
{
    public int solution(int [][]board)
    {
        // 초기값 설정
        int answer = 1234;
        // board보다 1씩 큰 크기의 2차원 배열 생성 (패딩)
        int[][] boards = new int[board.length+1][board[0].length+1];
        // board의 내용을 boards에 복사하면서 테두리(0으로 초기화)를 추가
        for(int i = 0 ; i < board.length ; i++){
            for(int j = 0 ; j < board[i].length ; j++){
                // board의 값을 boards의 (1,1)부터 채워넣음
                boards[i+1][j+1] = board[i][j];
            }
        }
        // 가장 큰 정사각형의 변의 길이
        int max = 0;
        // boards 배열을 순회하며 가장 큰 정사각형 찾기
        for(int i = 1 ; i < boards.length ; i++){
            for(int j = 1 ; j < boards[i].length ; j++){
                // 현재 칸이 1인 경우 (정사각형의 일부일 가능성)
                if(boards[i][j] == 1){
                    // 왼쪽 칸의 값
                    int left = boards[i-1][j];
                    // 위쪽 칸의 값
                    int up = boards[i][j-1];
                    // 왼쪽 대각선 위 칸의 값
                    int leftDia = boards[i-1][j-1];
                    // 왼쪽, 위, 왼쪽 대각선 위 값 중 최소값
                    int min = Math.min(left, Math.min(up, leftDia));
                    // 현재 칸을 기준으로 만들 수 있는 가장 큰 정사각형의 변의 길이 갱신
                    boards[i][j] = min + 1;
                    // 최대값 갱신
                    max = Math.max(max, min + 1);
                }
            }
        }
        // 넓이 계산
        answer = max * max;
        return answer;
    }
}

// 배열 선언 없이 풀이
class Solution
{
    public int solution(int [][]board)
    {   
        int x = board.length;
        int y = board[0].length;
        int max = 0;
        
        if(x <= 1 || y <= 1) return 1;
        
        for(int i = 1 ; i < x ; i++){
            for(int j = 1 ; j < y ; j++){
                if(board[i][j] >= 1){
                    int up = board[i-1][j];
                    int left = board[i][j-1];
                    int upperLeft = board[i-1][j-1];
                    int min = Math.min(up, left);
                    min = Math.min(min, upperLeft);
                    board[i][j] = min + 1;
                    max = Math.max(max, min+1);
                }
            }
        }
        return max * max;
    }
}
