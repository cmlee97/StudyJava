고고학자인 혜선은 오래전부터 성궤의 행방을 추적해왔습니다. 그동안 그의 연구는 주류 학자들로부터 인정받지 못했었지만, 혜선이는 포기하지 않고 조사를 계속했고 마침내 성궤의 행방을 알아내었습니다.

그러나 오래전 누군가로부터 봉인된 성궤는 특별한 잠금장치에 의해 보호되고 있었습니다. 잠금장치는 일종의 퍼즐과 연결되어 퍼즐을 해결하면 열리는 것으로 보입니다.

퍼즐은 시계들이 행렬을 이루는 구조물인데 하나의 시계에 시곗바늘은 하나씩만 있습니다. 각 시곗바늘은 시계방향으로만 돌릴 수 있고 한 번의 조작으로 90도씩 돌릴 수 있습니다.
시계들은 기계장치에 의해 연결되어 있어 어떤 시계의 시곗바늘을 돌리면 그 시계의 상하좌우로 인접한 시계들의 시곗바늘도 함께 돌아갑니다.
행렬의 모서리에 위치한 시계의 시곗바늘을 돌리는 경우에는 인접한 세 시계의 시곗바늘들이 함께 돌아가며, 꼭짓점에 위치한 시계의 시곗바늘을 돌리는 경우에는 인접한 두 시계의 시곗바늘들이 함께 돌아갑니다.

각 시계는 12시, 3시, 6시, 9시 방향 중의 한 방향을 가리키고 있습니다. 각 시계의 시곗바늘을 적절히 조작하여 모든 시곗바늘이 12시 방향을 가리키면 퍼즐이 해결되어 성궤를 봉인하고 있는 잠금장치가 열릴 것입니다.

노후화된 퍼즐 기계장치가 걱정되었던 혜선은 가능한 최소한의 조작으로 퍼즐을 해결하려고 합니다. 시곗바늘들의 행렬 clockHands가 매개변수로 주어질 때, 퍼즐을 해결하기 위한 최소한의 조작 횟수를 return 하도록 solution 함수를 완성해주세요.

제한사항
2 ≤ clockHands의 길이 ≤ 8
clockHands는 2차원 배열이며 행과 열의 크기가 동일합니다.
0 ≤ clockHands의 원소 ≤ 3
clockHands[i]의 원소들은 시곗바늘의 방향을 나타내며 0은 12시 방향, 1은 3시 방향, 2는 6시 방향, 3은 9시 방향을 나타냅니다.
해결 가능한 퍼즐만 주어집니다.

//DFS이용
import java.util.*;
class Solution {
    //1. 시계 배열의 크기
    int N = Integer.MAX_VALUE;
    //2. 최소 회전 횟수
    int answer = Integer.MAX_VALUE;
    //3. 각 칸의 시계 바늘 상태 (0-3)
    int[][] map;
    //4. 각 행의 시계 바늘 회전 횟수
    int[] rot;
    //5. 상하좌우 이동을 위한 x좌표 변화량
    int[] x = {0,0,0,1,-1};
    //6. 상하좌우 이동을 위한 y좌표 변화량
    int[] y = {0,1,-1,0,0};
    
    public int solution(int[][] clockHands) {
        //7. 초기화
        N = clockHands.length;
        map = new int[N][N];
        rot = new int[N];
        //8. 시계 바늘 정보를 0-3으로 변환하기 (12시 = 0)
        for(int i = 0 ; i < N ; i++){
            for(int j = 0 ; j < N ; j++){
                map[i][j] = 4 - clockHands[i][j] == 4 ? 0 : 4-clockHands[i][j];
            }
        }
        //9. dfs함수 호출을 통해 모든 경우의 수 탐색
        dfs(0);
        return answer;
    }
    
    //DFS함수
    void dfs(int index){
        //10. 모든 시계 바늘에 대해 회전 횟수가 결정된 경우(정합성 판별)
        if(index == N){
            //11. 임시 배열 생성 및 초기화
            int[][] temp = new int[N][N];
            int[] current = new int[N];
            for(int i = 0 ; i < N ; i++){
                //12. 현재 행의 시계 바늘 회전 횟수 저장
                current[i] = rot[i];
            }
            for(int i = 0 ; i < N ; i++){
                for(int j = 0 ; j < N ; j++){
                    temp[i][j] = map[i][j];
                }
            }
            //13. 시계 바늘 회전에 따른 영향값 계산
            int tempResult = 0;
            //14. 0-마지막 row까지 반복
            for(int i = 0 ; i < N ; i++){
                //15. 특정 row에 대해 시계 돌리기
                for(int j = 0 ; j < N ; j++){
                    //16. 현재 시계 바늘의 회전 횟수 누적
                    tempResult += current[j];
                    //17. 4방향과 현재 위치 시계 돌리기
                    for(int k = 0 ; k < 5 ; k++){
                        int X = i + x[k];
                        int Y = j + y[k];
                        //18. 범위가 벗어나는 경우에는 무시하고 진행
                        if(X < 0 || Y < 0 || X >= N || Y >= N) continue;
                        //19. 인접한 시계 바늘의 영향 계산 (4로 나눈 나머지 사용)
                        temp[X][Y] = (temp[X][Y] - current[j] >= 0 ? temp[X][Y] - current[j] : temp[X][Y] - current[j] + 4);
                    }
                }
                //20. 다음 행으로 이동(다음 row가 돌려야하는 횟수)
                for(int j = 0 ; j < N ; j++){
                    current[j] = temp[i][j];
                }
            }
            //21. 모든 시계 바늘이 정지한 경우 (0이면 정지)
            boolean check = true;
            //22. 마지막 열의 상태 판별하여 결과 계산하기
            for(int i = 0 ; i < N ; i++){
                if(current[i] != 0){
                    check = false;
                    break;
                }
            }
            //23. 모든 시계 바늘이 정지한 경우 최소 회전 횟수 갱신
            if(check) answer = Math.min(answer, tempResult);
            return;
         
        }
        //24. 각 시계 바늘에 대해 0-3번 회전하는 경우(회전수 정하기)
        for(int i = 0 ; i < 4 ; i++){
            rot[index] = i;
            //25. dfs함수 재귀 호출을 통해 탐색
            dfs(index + 1);
        }
    }
}
