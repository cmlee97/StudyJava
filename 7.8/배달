class Solution {
    public int solution(int N, int[][] road, int K) {
        int answer = 0;
        
        int[][] map = new int[N+1][N+1];
        
        //배열 초기화
        for(int i = 1 ; i <= N ; i++){
            for(int j = 1 ; j <= N ; j++){
                if(i==j) continue;
                map[i][j] = 500001;
            }
        }
        
        //정보저장
        for(int i = 0 ; i < road.length ;i++){
            int a = road[i][0];
            int b = road[i][1];
            int w = road[i][2];
            
            if(map[a][b] > w){
                map[a][b] = w;
                map[b][a] = w;
            }
        }
        int[] dist = new int[N+1];
        for(int i = 2 ; i <= N ; i++){
            dist[i] = (dist[i]==0) ? 500001 : map[1][i];
        }
        boolean[] visited = new boolean[N + 1];
        visited[1] = true;
        
        for(int i = 1 ; i <= N - 1 ; i++){
            int min_index = 1;
            int min_value = 500001;
            for(int j = 2 ; j <= N ; j++){
                if(!visited[j] && dist[j] < min_value){
                    min_value = dist[j];
                    min_index = j;
                }
            }
            visited[min_index] = true;
            
            for(int j = 2 ; j <= N ; j++){
                if(dist[j] > dist[min_index] + map[min_index][j]){
                    dist[j] = dist[min_index] + map[min_index][j];
                }
            }
        }
        //answer개수 찾기
        for(int i = 1 ; i <= N ; i++){
            if(dist[i] <= K) answer++;
        }
        return answer;
    }
}

//다익스타라 문제
//해당 마을 부터 다른 마을까지 갈 수 있는 최소 거리를 구한 뒤에, k보다 같거나 작은 경우만 구한다
//A를 시작점으로 했을때 다른도시까지의 거리에 대한 정보를 dist[]배열로 선언하여 초기화 한다 ex) 길이 존재하면 해당 값을, 존재하지 않으면 무한대값으로
//다른 도시 방문여부 visited[]배열 선언
//시작점을 제외하고 dist[]값이 가장 작은 도시의 index를 가져오고
//해당 index를 visited로 처리한후 index의 도시를 거쳐가는 경로가 원래 dist[]에 들어있는 값보다 작으면 그 값을 변경
//n-1번 반복
